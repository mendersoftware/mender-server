// Copyright 2024 Northern.tech AS
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	    http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.

// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"
	tenant2 "github.com/mendersoftware/mender-server/pkg/tenant"

	mock "github.com/stretchr/testify/mock"
)

// ClientRunner is an autogenerated mock type for the ClientRunner type
type ClientRunner struct {
	mock.Mock
}

// CheckHealth provides a mock function with given fields: ctx
func (_m *ClientRunner) CheckHealth(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckHealth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTenant provides a mock function with given fields: ctx, tid
func (_m *ClientRunner) GetTenant(ctx context.Context, tid string) (*tenant2.Tenant, error) {
	ret := _m.Called(ctx, tid)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *tenant2.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*tenant2.Tenant, error)); ok {
		return rf(ctx, tid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *tenant2.Tenant); ok {
		r0 = rf(ctx, tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant2.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantUsers provides a mock function with given fields: ctx, tenantID
func (_m *ClientRunner) GetTenantUsers(ctx context.Context, tenantID string) ([]tenant2.User, error) {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for GetTenantUsers")
	}

	var r0 []tenant2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]tenant2.User, error)); ok {
		return rf(ctx, tenantID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []tenant2.User); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tenant2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyToken provides a mock function with given fields: ctx, token
func (_m *ClientRunner) VerifyToken(ctx context.Context, token string) (*tenant2.Tenant, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *tenant2.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*tenant2.Tenant, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *tenant2.Tenant); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tenant2.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClientRunner creates a new instance of ClientRunner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientRunner(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientRunner {
	mock := &ClientRunner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
