openapi: 3.0.1
info:
  description: |
    Version 2 of the API for deployments management.
    Intended for use by the web UI.
  title: Deployments v2
  version: "2"
tags:
  - name: Management API
paths:
  /api/management/v2/deployments/deployments:
    get:
      description: |
        Returns a filtered collection of deployments in the system. While you can provide multiple
        deployment identifiers, and multiple names to get the multiple deployments you cannot mix
        the ids and names in a one query expecting to get deployments that match both names or ids.
        The endpoint will return the deployments that match the ids and the name, if combined.
      operationId: Deployments V2 List Deployments
      parameters:
      - description: |
          Deployment identifier. You can provide it multiple times to query a set of deployments.
        in: query
        name: id
        schema:
          type: string
      - description: |
          Deployment name. You can provide it multiple times to query a set of deployments.
        in: query
        name: name
        schema:
          type: string
      - description: Deployment status filter.
        in: query
        name: status
        schema:
          enum:
          - inprogress
          - finished
          - pending
          type: string
      - description: |
          Deployment type filter.
        in: query
        name: type
        schema:
          enum:
          - software
          - configuration
          type: string
      - description: Results page number
        in: query
        name: page
        schema:
          default: 1.0
          type: integer
      - description: Maximum number of results per page.
        in: query
        name: per_page
        schema:
          default: 20.0
          maximum: 500
          type: integer
      - description: List only deployments created before and equal to Unix timestamp
          (UTC)
        in: query
        name: created_before
        schema:
          type: integer
      - description: List only deployments created after and equal to Unix timestamp
          (UTC)
        in: query
        name: created_after
        schema:
          type: integer
      - description: |
          Supports sorting the deployments list by creation date.
        in: query
        name: sort
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentV2'
                type: array
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of deployments matching query.
              schema:
                type: integer
            Link:
              description: "Standard header, we support 'first', 'next', and 'prev'."
              schema:
                type: string
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: List all the deployments matching the specified filter parameters
      tags:
      - Management API
  /api/management/v2/deployments/deployments/releases:
    delete:
      description: |
        Deletes releases with names provided in the message body.
        Releases used by deployments in progress can not be deleted
        until deployment finishes.
      operationId: Delete Releases
      parameters:
      - description: Name of the release to be deleted
        in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Releases deleted successfully.
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleasesDeleteError'
          description: Conflict.
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: Delete the releases with given names
      tags:
      - Management API
    get:
      description: |
        Returns a collection of releases, allows filtering by release name and sorting
        by name or last modification date.
      operationId: Deployments V2 List Releases with pagination
      parameters:
      - description: Release name filter.
        in: query
        name: name
        schema:
          type: string
      - description: Tag filter.
        explode: true
        in: query
        name: tag
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Update type filter.
        in: query
        name: update_type
        schema:
          type: string
      - description: Starting page.
        in: query
        name: page
        schema:
          default: 1.0
          type: integer
      - description: Maximum number of results per page.
        in: query
        name: per_page
        schema:
          default: 20.0
          maximum: 500
          type: integer
      - description: |
          Sort the release list by the specified field and direction.
        in: query
        name: sort
        schema:
          default: name:asc
          enum:
          - artifacts_count:asc
          - artifacts_count:desc
          - modified:asc
          - modified:desc
          - name:asc
          - name:desc
          - tags:asc
          - tags:desc
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
              - name: my-app-v1.0.1
                artifacts:
                - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                  name: Application 1.0.0
                  description: Johns Monday test build
                  device_types_compatible:
                  - Beagle Bone
                  info:
                    format: mender
                    version: 3
                  updates:
                  - type_info:
                      type: rootfs-image
                    files:
                    - name: rootfs-image-1
                      checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                      size: 123
                      date: 2016-03-11T13:03:17.063+0000
                    metadata: {}
                    meta_data: []
                  artifact_provides:
                    artifact_name: test
                    rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                    rootfs-image.version: test
                  artifact_depends:
                    device_type:
                    - test
                  clears_artifact_provides:
                  - rootfs-image.*
                  size: 36891648
                  modified: 2016-03-11T13:03:17.063493443Z
                - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                  name: Application 1.0.0
                  description: Johns Monday test build
                  device_types_compatible:
                  - Raspberry Pi
                  info:
                    format: mender
                    version: 3
                  updates:
                  - type_info:
                      type: rootfs-image
                    files:
                    - name: rootfs-image-1
                      checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                      size: 123
                      date: 2016-03-11T13:03:17.063+0000
                    metadata: {}
                    meta_data: []
                  artifact_provides:
                    artifact_name: test
                    rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                    rootfs-image.version: test
                  artifact_depends:
                    device_type:
                    - test
                  clears_artifact_provides:
                  - rootfs-image.*
                  size: 36891648
                  modified: 2016-03-11T13:03:17.063493443Z
              - name: my-app-v2.0.0
                artifacts:
                - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                  name: Application 2.0.0
                  description: Johns Monday test build
                  device_types_compatible:
                  - Beagle Bone
                  info:
                    format: mender
                    version: 3
                  updates:
                  - type_info:
                      type: rootfs-image
                    files:
                    - name: rootfs-image-1
                      checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                      size: 123
                      date: 2016-03-11T13:03:17.063+0000
                    metadata: {}
                    meta_data: []
                  artifact_provides:
                    artifact_name: test
                    rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                    rootfs-image.version: test
                  artifact_depends:
                    device_type:
                    - test
                  clears_artifact_provides:
                  - rootfs-image.*
                  size: 36891648
                  modified: 2016-03-11T13:03:17.063493443Z
              schema:
                $ref: '#/components/schemas/ReleasesV2'
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of releases matching query.
              schema:
                type: integer
            Link:
              description: "Standard header, we support 'first', 'next', and 'prev'."
              schema:
                type: string
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        List releases
      tags:
      - Management API
  /api/management/v2/deployments/deployments/releases/{release_name}:
    get:
      description: |
        Returns the release with given name.
      operationId: Get Release with given name
      parameters:
      - description: Name of the release
        in: path
        name: release_name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseV2'
          description: Successful response.
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "404":
          $ref: '../common/responses.yaml#/components/responses/NotFound'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Get release
      tags:
      - Management API
    patch:
      description: |
        Updates the Release object.
      operationId: Update Release information
      parameters:
      - description: Name of the release
        in: path
        name: release_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseUpdate'
        required: false
      responses:
        "204":
          content: {}
          description: Successful response.
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Update selected fields of the Release object.
      tags:
      - Management API
  /api/management/v2/deployments/deployments/releases/{release_name}/tags:
    put:
      description: |
        Assigns tags to a release. The tags associated with the release will be
        replaced with the ones defined in the request body.

        LIMITATIONS:
          * Max 20 tags can be assigned to a single release.
          * There can be no more than 100 unique tag keys in total.
      operationId: Assign Release Tags
      parameters:
      - description: Name of the release
        in: path
        name: release_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
        required: false
      responses:
        "204":
          content: {}
          description: Successful response.
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "409":
          content:
            application/json:
              example:
                error: the total number of unique tags has been exceeded
                request_id: f7881e82-0492-49fb-b459-795654e7188a
              schema:
                $ref: '../common/schemas.yaml#/components/schemas/Error'
          description: Too many unique tag keys in use.
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Update and replace the tags of a release.
      tags:
      - Management API
  /api/management/v2/deployments/releases/all/tags:
    get:
      operationId: List Release Tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
          description: Successful response.
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "409":
          content:
            application/json:
              example:
                error: the total number of unique tags has been exceeded
                request_id: f7881e82-0492-49fb-b459-795654e7188a
              schema:
                $ref: '../common/schemas.yaml#/components/schemas/Error'
          description: Too many unique tag keys in use.
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Lists all available tags for releases.
      tags:
      - Management API
  /api/management/v2/deployments/releases/all/types:
    get:
      operationId: List Release Types
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTypes'
          description: Successful response.
        "400":
          $ref: '../common/responses.yaml#/components/responses/InvalidRequestError'
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Lists all release update types.
      tags:
      - Management API
  /api/management/v2/deployments/artifacts:
    get:
      description: |
        Returns a collection of all artifacts sorted by name.
      operationId: Deployments V2 List Artifacts with pagination
      parameters:
      - description: |
          Artifact(s) name(s) filter.
          Multiple names can be provided (e.g., `?name=foo&name=bar`).
          Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
          Note: when using prefix matching you may pass only a single value and you cannot combine
          prefix matching and exact matching in the same request.
        in: query
        name: name
        schema:
          type: array
          items:
            type: string
        style: form
        explode: true
        examples:
          single:
            summary: Get artifact with the given name.
            value:
              - foo
          multi:
            summary: Get artifact matching multiple names by repeating the query parameter.
            value:
              - foo
              - bar
          prefix:
            summary: Get artifact with the specified prefix
            value:
              - foo*
      - description: |
          Artifact description filter.
          Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
        in: query
        name: description
        schema:
          type: string
      - description: |
          Artifact device type filter.
          Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
        in: query
        name: device_type
        schema:
          type: string
      - description: Starting page.
        in: query
        name: page
        schema:
          default: 1
          type: integer
      - description: Maximum number of results per page.
        in: query
        name: per_page
        schema:
          default: 20
          maximum: 500
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArtifactV2'
                type: array
          description: OK
          headers:
            Link:
              description: "Standard header, we support 'first', 'next', and 'prev'."
              schema:
                type: string
        "401":
          $ref: '../common/responses.yaml#/components/responses/UnauthorizedError'
        "500":
          $ref: '../common/responses.yaml#/components/responses/InternalServerError'
      security:
      - ManagementJWT: []
      summary: |
        Lists known artifacts.
      tags:
      - Management API
components:
  securitySchemes:
    ManagementJWT:
      $ref: '../common/securitySchemes.yaml#/components/securitySchemes/ManagementJWT'
  schemas:
    ArtifactV2:
      description: Detailed artifact.
      example:
        id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
        name: Application 1.0.0
        description: Johns Monday test build
        device_types_compatible:
        - Beagle Bone
        info:
          format: mender
          version: 3
        updates:
        - type_info:
            type: rootfs-image
          files:
          - name: rootfs-image-1
            checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
            size: 123
            date: 2016-03-11T13:03:17.063+0000
          metadata: {}
          meta_data: []
        artifact_provides:
          artifact_name: test
          rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
          rootfs-image.version: test
        artifact_depends:
          device_type:
          - test
        clears_artifact_provides:
        - rootfs-image.*
        size: 36891648
        modified: 2016-03-11T13:03:17.063493443Z
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        device_types_compatible:
          description: An array of compatible device types.
          items:
            type: string
          type: array
        info:
          $ref: './schemas.yaml#/components/schemas/ArtifactInfo'
        signed:
          description: Idicates if artifact is signed or not.
          type: boolean
        updates:
          items:
            $ref: './schemas.yaml#/components/schemas/Update'
          type: array
        artifact_provides:
          additionalProperties:
            type: string
          description: |
            List of Artifact provides.

            Map of key/value pairs, where both keys and values are strings.
          type: object
        artifact_depends:
          additionalProperties:
            items:
              type: string
            type: array
          description: |
            List of Artifact depends.

            Map of key/value pairs, where keys are strings and values are lists of strings.
          type: object
        clears_artifact_provides:
          description: List of Clear Artifact provides.
          items:
            type: string
          type: array
        size:
          description: |
            Artifact total size in bytes - the size of the actual file that will be transferred to the device (compressed).
          type: integer
        modified:
          description: |
            Represents creation / last edition of any of the artifact properties.
          format: date-time
          type: string
      required:
      - description
      - device_types_compatible
      - id
      - modified
      - name
      type: object
    ReleasesV2:
      description: List of releases
      items:
        $ref: '#/components/schemas/ReleaseV2'
      type: array
    ReleaseV2:
      description: Groups artifacts with the same release name into a single resource.
      example:
        name: my-app-v1.0.1
        artifacts:
        - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
          name: Application 1.0.0
          description: Johns Monday test build
          device_types_compatible:
          - Beagle Bone
          info:
            format: mender
            version: 3
          updates:
          - type_info:
              type: rootfs-image
            files:
            - name: rootfs-image-1
              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
              size: 123
              date: 2016-03-11T13:03:17.063+0000
            metadata: {}
            meta_data: []
          artifact_provides:
            artifact_name: test
            rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
            rootfs-image.version: test
          artifact_depends:
            device_type:
            - test
          clears_artifact_provides:
          - rootfs-image.*
          size: 36891648
          modified: 2016-03-11T13:03:17.063493443Z
        - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
          name: Application 1.0.0
          description: Johns Monday test build
          device_types_compatible:
          - Raspberry Pi
          info:
            format: mender
            version: 3
          updates:
          - type_info:
              type: rootfs-image
            files:
            - name: rootfs-image-1
              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
              size: 123
              date: 2016-03-11T13:03:17.063+0000
            metadata: {}
            meta_data: []
          artifact_provides:
            artifact_name: test
            rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
            rootfs-image.version: test
          artifact_depends:
            device_type:
            - test
          clears_artifact_provides:
          - rootfs-image.*
          size: 36891648
          modified: 2016-03-11T13:03:17.063493443Z
      properties:
        name:
          description: |
            release name.
          type: string
        modified:
          description: |
            Last modification time for the release.
          format: date-time
          type: string
        artifacts:
          description: List of artifacts for this release.
          items:
            $ref: '#/components/schemas/ArtifactV2'
          type: array
        tags:
          description: |-
            Tags assigned to the release used for filtering releases. Each tag
            must be valid a ASCII string and contain only lowercase and uppercase
            letters, digits, underscores, periods and hyphens.
          items:
            type: string
          type: array
        notes:
          description: |
            Additional information describing a Release limited to 1024 characters. Please use the v2 API to set this field.
          type: string
      type: object
    ReleaseUpdate:
      description: Fields to be updated in the given Release.
      example:
        notes: New security fixes 2023
      properties:
        notes:
          description: "Release notes, limited to maximum length."
          type: string
      type: object
    Tags:
      description: |-
        Tags assigned to the release used for filtering releases. Each tag
        must be valid a ASCII string and contain only lowercase and uppercase
        letters, digits, underscores, periods and hyphens.
      items:
        type: string
      type: array
    UpdateTypes:
      description: Update types as present in the images.
      items:
        type: string
      type: array
    FilterV2:
      description: Inventory filter assigned to the deployment
      example:
        id: myfilter
        name: My Filter
        terms:
        - scope: inventory
          attribute: serial_no
          type: $eq
          value: "123456789"
      properties:
        id:
          description: |
            Unique identifier of the saved filter.
          type: string
        name:
          description: |
            Name of the saved filter.
          type: string
        terms:
          items:
            $ref: './schemas.yaml#/components/schemas/AttributeFilterPredicate'
          type: array
      required:
      - id
      - name
      type: object
    DeploymentPhase:
      example:
        application/json:
          id: foo
          start_ts: 2020-07-06T15:04:49.114046203+02:00
          batch_size: 5
          device_count: 42
      properties:
        id:
          description: Phase identifier.
          type: string
        batch_size:
          description: |
            Percentage of devices to update in the phase.
          type: integer
        start_ts:
          description: |
            Start date of a phase.
            May be undefined for the first phase of a deployment.
          format: date-time
          type: string
        device_count:
          description: |
            Number of devices which already requested an update within this phase.
          type: integer
      type: object
    DeploymentV2:
      example:
        created: 2016-02-11T13:03:17.063493443Z
        status: finished
        name: production
        artifact_name: Application 0.0.1
        id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
        finished: 2016-03-11T13:03:17.063493443Z
        phases:
        - batch_size: 5
        - start_ts: 2020-07-06T17:04:49.114046203+02:00
          device_count: 25
        - batch_size: 15
        - start_ts: 2020-07-06T18:04:49.114046203+02:00
          device_count: 10
        - start_ts: 2020-07-06T19:04:49.114046203+02:00
          device_count: 0
        device_count: 500
        retries: 3
      properties:
        id:
          description: Deployment identifier
          type: string
        name:
          description: Name of the deployment
          type: string
        artifact_name:
          description: Name of the artifact to deploy
          type: string
        created:
          description: Deployment's creation date and time
          format: date-time
          type: string
        finished:
          description: Deployment's completion date and time
          format: date-time
          type: string
        status:
          description: Status of the deployment
          enum:
          - scheduled
          - pending
          - inprogress
          - finished
          type: string
        device_count:
          description: Number of devices the deployment acted upon
          type: integer
        artifacts:
          description: An array of artifact's identifiers.
          items:
            type: string
          type: array
        groups:
          description: |
            An array of groups the devices targeted by the deployment belong to.
            Available only if the user created the deployment for a group or a single device (if the device was in a static group).
          items:
            type: string
          type: array
        phases:
          description: An array of deployments phases (if any were defined for the
            deployment).
          items:
            $ref: '#/components/schemas/DeploymentPhase'
          type: array
        retries:
          description: "The number of times a device can retry the deployment in case\
            \ of failure, defaults to 0"
          type: integer
        update_control_map:
          additionalProperties: true
          description: |
            A valid JSON object defining the update control map.
            *NOTE*: Available only in the Enterprise plan.
          type: object
        max_devices:
          description: |
            max_devices denotes a limit on a number of completed deployments (failed or successful) above which the dynamic deployment will be finished.
          type: integer
        initial_device_count:
          description: |
            In case of dynamic deployments this is a number of devices targeted initially (maching the filter at the moment of deployment creation).
          type: integer
        dynamic:
          description: |
            Flag indicating if the deployment is dynamic or not.
          type: boolean
        filter:
          $ref: '#/components/schemas/FilterV2'
        type:
          enum:
          - configuration
          - software
          type: string
        configuration:
          description: |
            A string containing a configuration object provided
            with the deployment constructor.
          type: string
        autogenerate_delta:
          description: |
            The flag idicating if the autogeneration of delta artifacts is enabled for a given deployment.
          type: boolean
        statistics:
          $ref: './schemas.yaml#/components/schemas/DeploymentStatistics'
      required:
      - artifact_name
      - created
      - device_count
      - id
      - name
      - status
      type: object
    ReleasesDeleteError:
      description: Releases used by active deployment.
      example:
        error: active deployments are using some of the releases from the request
        request_id: f7881e82-0492-49fb-b459-795654e7188a
      properties:
        error:
          description: Description of the error.
          type: string
        active_deployments:
          description: List of IDs of active deployments which are using releases
            from the request.
          items:
            type: string
          type: array
        request_id:
          description: Request ID (same as in X-MEN-RequestID header).
          type: string
      type: object
