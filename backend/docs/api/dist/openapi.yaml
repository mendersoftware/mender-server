openapi: 3.0.1
info:
  contact:
    email: support@mender.io
    name: support@mender.io
    url: https://hosted.mender.io
  description: |
    Combined API specification for the features of the different Mender backend services, suitable for code generation applications
  title: Mender API
  version: '1'
servers:
  - url: https://hosted.mender.io/
tags:
  - name: Mender_API_Mender API
    x-displayName: Mender API
  - name: Deployments_Device API
    x-displayName: Device API
  - name: Deployments_Internal_API_Internal API
    x-displayName: Internal API
  - name: Deployments_Management API
    x-displayName: Management API
  - name: Deployments_v2_Management API
    x-displayName: Management API
  - name: Device_Authentication_Device API
    x-displayName: Device API
  - name: Device_Authentication_Internal API
    x-displayName: Internal API
  - name: Device_Authentication_Management API
    x-displayName: Management API
  - name: Device_configure_Device API
    x-displayName: Device API
  - name: Device_configure_Internal API
    x-displayName: Internal API
  - name: Device_configure_Management API
    x-displayName: Management API
  - name: Device_connect_Device API
    x-displayName: Device API
  - name: Device_connect_Internal API
    x-displayName: Internal API
  - name: Device_connect_Management API
    x-displayName: Management API
  - name: Device_inventory_Device API
    x-displayName: Device API
  - name: Device_inventory_Internal API
    x-displayName: Internal API
  - name: Device_inventory_filters_and_search_Internal API
    x-displayName: Internal API
  - name: Device_inventory_Management API
    x-displayName: Management API
  - name: Device_inventory_filters_and_search_Management API
    x-displayName: Management API
  - name: IoT_Manager_Internal API
    x-displayName: Internal API
  - name: IoT_Manager_Management API
    x-displayName: Management API
  - name: User_administration_and_authentication_Internal API
    x-displayName: Internal API
  - name: User_Administration_Management API
    x-displayName: Management API
  - name: Workflows_other
    x-displayName: other
paths:
  /api/devices/v1/deployments/device/deployments/next:
    get:
      description: |
        On success, either an empty response or a DeploymentInstructions object
        is returned depending on whether there are any pending updates.
      operationId: Check Update
      parameters:
        - description: currently installed artifact
          in: query
          name: artifact_name
          required: true
          schema:
            type: string
        - description: Device type of device
          in: query
          name: device_type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                id: w81s4fae-7dec-11d0-a765-00a0c91e6bf6
                artifact:
                  artifact_name: my-app-0.1
                  source:
                    uri: https://aws.myupdatebucket.com/image123
                    expire: '2016-03-11T13:03:17.063493443Z'
                  device_types_compatible:
                    - rspi
                    - rspi2
                    - rspi0
              schema:
                $ref: '#/components/schemas/DeploymentInstructions'
          description: Successful response.
        '204':
          content: {}
          description: No updates for device.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
      summary: Get next update
      tags:
        - Deployments_Device API
  /api/devices/v1/deployments/device/deployments/{id}/status:
    put:
      description: |
        Updates the status of a deployment on a particular device. Final status
        of the deployment is required to be set to indicate the success or failure
        of the installation process. The status can not be changed when deployment
        status is set to aborted. Reporting of intermediate steps such as
        installing, downloading, rebooting is optional.
      operationId: Update Deployment Status
      parameters:
        - description: Deployment identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentStatus'
        description: Deployment status.
        required: true
      responses:
        '204':
          content: {}
          description: Status updated successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          content: {}
          description: Status already set to aborted.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
      summary: Update the device deployment status
      tags:
        - Deployments_Device API
  /api/devices/v1/deployments/device/deployments/{id}/log:
    put:
      description: |
        Set the log of a selected deployment. Messages are split by line in the payload.
      operationId: Report Deployment Log
      parameters:
        - description: Deployment identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentLog'
        description: Deployment log
        required: true
      responses:
        '204':
          content: {}
          description: The deployment log uploaded successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
      summary: Upload the device deployment log
      tags:
        - Deployments_Device API
  /api/devices/v1/deployments/download/configuration/{deployment_id}/{device_type}/{device_id}:
    get:
      operationId: Fetch Configuration
      parameters:
        - description: Deployment UUID
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
        - description: Device type of the calling device
          in: path
          name: device_type
          required: true
          schema:
            type: string
        - description: Device UUID
          in: path
          name: device_id
          required: true
          schema:
            type: string
        - description: Time of link expire
          in: query
          name: x-men-expire
          required: true
          schema:
            format: date-time
            type: string
        - description: Signature of the URL link
          in: query
          name: x-men-signature
          required: true
          schema:
            type: string
        - description: Device tenant ID
          in: query
          name: tenant_id
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Artifact file
                format: binary
                type: string
          description: Successful response
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '403':
          content: {}
          description: The download link has expired or the signature is invalid.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security: []
      summary: |
        Internally generated download link for deploying device configurations.
        All parameters are generated internally when fetching a configuration deployment.
      tags:
        - Deployments_Device API
  /api/internal/v1/deployments/health:
    get:
      operationId: Deployments Internal Check Health
      responses:
        '204':
          content: {}
          description: |
            Service is healthy and all dependencies are up and running.
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          content:
            application/json:
              example:
                error: 'error reaching MongoDB: context deadline exceeded'
                request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
              schema:
                $ref: '#/components/schemas/Error'
          description: |
            Service unhealthy / not ready to accept traffic. At least one dependency is not running.
      summary: Check the health of the service
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/alive:
    get:
      operationId: Deployments Internal Check Liveliness
      responses:
        '204':
          content: {}
          description: Service is up and running.
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: |
        Trivial endpoint that unconditionally returns an empty 204 response whenever the API handler is running correctly.
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{id}/storage/settings:
    get:
      description: |
        Returns an object with per tenant storage layer specific settings.
      operationId: Get Storage Settings
      parameters:
        - description: Tenant ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageSettings'
          description: Successful response with all available settings.
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get storage setting for a given tenant
      tags:
        - Deployments_Internal_API_Internal API
    put:
      description: Set the storage layer settings for a given tenant.
      operationId: Set Storage Settings
      parameters:
        - description: Tenant ID
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageSettings'
        description: |-
          Settings to set.
          If set to null or an empty object, the tenant will use the default settings.
        required: false
      responses:
        '204':
          content: {}
          description: Settings updated.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Set storage settings for a given tenant
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{id}/limits/storage:
    get:
      description: |
        Get storage limit and current storage usage for given tenant.
        If the limit value is 0 it means storage space is unlimited
      operationId: Deployments Internal Get Storage Usage
      parameters:
        - description: Tenant ID
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageUsage'
          description: Successful response.
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get storage limit and current storage usage for given tenant
      tags:
        - Deployments_Internal_API_Internal API
    put:
      description: |
        Set storage limit for given tenant.
        If the limit value is 0 it means storage space is unlimited
      operationId: Set Storage Limit
      parameters:
        - description: Tenant ID
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageLimit'
        required: true
      responses:
        '204':
          content: {}
          description: Limit information updated.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Set storage limit for given tenant
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants:
    post:
      description: |
        Sets up all tenant-related infrastructure, e.g. a migrated tenant's database.
      operationId: Deployments Internal Create Tenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
        description: New tenant descriptor.
        required: true
      responses:
        '201':
          content: {}
          description: Tenant was successfully provisioned.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Provision a new tenant
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{id}/deployments:
    get:
      description: |
        Returns a filtered collection of deployments in the system,
        including active and historical. If both 'status' and 'query' are
        not specified, all devices are listed.
      operationId: Get Deployments
      parameters:
        - description: Tenant ID
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Deployment status filter.
          in: query
          name: status
          schema:
            enum:
              - inprogress
              - finished
              - pending
            type: string
        - description: Deployment name or description filter.
          in: query
          name: search
          schema:
            type: string
        - description: Results page number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: List only deployments created before and equal to Unix timestamp (UTC)
          in: query
          name: created_before
          schema:
            type: integer
        - description: List only deployments created after and equal to Unix timestamp (UTC)
          in: query
          name: created_after
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              example:
                - created: '2016-02-11 13:03:17.063493+00:00'
                  status: finished
                  name: production
                  artifact_name: Application 0.0.1
                  id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
                  finished: '2016-03-11 13:03:17.063493+00:00'
                  device_count: 10
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentV1Internal'
                type: array
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of deployments matching query.
              schema:
                type: integer
        '400':
          $ref: '#/components/responses/InvalidRequestError'
      summary: Get all deployments for specific tenant
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{tenant_id}/deployments/devices:
    get:
      description: |
        Return the Deployments history entries for the specified IDs
      operationId: List Device Deployments entries
      parameters:
        - description: Tenant ID
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
        - description: Deployment Device ID filter. Can be repeated to query a set of entries.
          explode: true
          in: query
          name: id
          schema:
            items:
              type: string
            type: array
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceDeployment'
                type: array
          description: OK
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Return the Deployments history entries for the specified IDs
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{tenant_id}/deployments/devices/{id}:
    delete:
      description: Set 'decommissioned' status to all pending device deployments for a given device
      operationId: Remove Device from Deployments
      parameters:
        - description: Tenant ID
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
        - description: System wide device identifier
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Device was removed
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Remove device from all deployments
      tags:
        - Deployments_Internal_API_Internal API
    get:
      description: |
        Return the Deployments history for the specified Device, listing all its Deployments.
      operationId: Deployments Internal List Deployments for a Device
      parameters:
        - description: Tenant ID
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
        - description: System wide device identifier
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter deployments by status for the given device.
          in: query
          name: status
          schema:
            enum:
              - failure
              - aborted
              - pause_before_installing
              - pause_before_committing
              - pause_before_rebooting
              - downloading
              - installing
              - rebooting
              - pending
              - success
              - noartifact
              - already-installed
              - decommissioned
              - pause
              - active
              - finished
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 20
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceDeployment'
                type: array
          description: OK
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Return the Deployments history for a Device
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{id}/artifacts:
    post:
      description: |
        Upload mender artifact to a specific tenant. Multipart request with meta and artifact.
        Supports artifact [versions v1, v2, v3](https://docs.mender.io/overview/artifact#versions).
      operationId: Upload artifact
      parameters:
        - description: Tenant ID, or "default" if running in non-multitenant setup
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Upload_artifact_request'
        required: true
      responses:
        '201':
          content: {}
          description: Artifact uploaded.
          headers:
            Location:
              description: URL of the newly uploaded artifact.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Upload mender artifact
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{tenant_id}/configuration/deployments/{deployment_id}/devices/{device_id}:
    post:
      description: |
        Deploy configuration to a specified device.
        The artifact will be auto-generated based on the configuration object
        provided with the deployment constructor.
      operationId: Deployments Internal Create Deployment
      parameters:
        - description: Tenant identifier.
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
        - description: Device identifier.
          in: path
          name: device_id
          required: true
          schema:
            type: string
        - description: Deployment identifier.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationDeploymentRequest'
        description: New deployment that needs to be created.
        required: true
      responses:
        '201':
          content: {}
          description: New configuration deployment created.
          headers:
            Location:
              description: URL of the newly created deployment.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Create a configuration deployment
      tags:
        - Deployments_Internal_API_Internal API
  /api/internal/v1/deployments/tenants/{tenant_id}/devices/deployments/last:
    post:
      description: |
        Return the status of the last unsucessful device deployment.
      operationId: Get last device deployment status
      parameters:
        - description: Tenant identifier.
          in: path
          name: tenant_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LastDeviceDeploymentReq'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastDeviceDeploymentsStatuses'
          description: List of device deployment statuses returned.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      summary: Get status of the last device devployment
      tags:
        - Deployments_Internal_API_Internal API
  /api/management/v1/deployments/deployments:
    get:
      deprecated: true
      description: |
        Returns a filtered collection of deployments in the system,
        including active and historical. If both 'status' and 'query' are
        not specified, all devices are listed.

        DEPRECATED: _since Mon Oct 21 2024_ we deprecated the endpoint due to an issue with the "search" query
          behavior. Please use the v2 /deployments/deployments endpoint instead.
          In the new endpoint, we replaced search parameter with the "id" and "name" parameters.
      operationId: Deployments V1 List Deployments
      parameters:
        - description: Deployment status filter.
          in: query
          name: status
          schema:
            enum:
              - inprogress
              - finished
              - pending
            type: string
        - description: |
            Deployment type filter.
          in: query
          name: type
          schema:
            enum:
              - software
              - configuration
            type: string
        - description: Deployment name or description filter.
          in: query
          name: search
          schema:
            type: string
        - description: Results page number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
        - description: List only deployments created before and equal to Unix timestamp (UTC)
          in: query
          name: created_before
          schema:
            type: integer
        - description: List only deployments created after and equal to Unix timestamp (UTC)
          in: query
          name: created_after
          schema:
            type: integer
        - description: |
            Supports sorting the deployments list by creation date.
          in: query
          name: sort
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentV1'
                type: array
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of deployments matching query.
              schema:
                type: integer
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Find all deployments
      tags:
        - Deployments_Management API
    post:
      description: |
        Deploy software to specified devices. Artifact is auto assigned to the
        device from all available artifacts based on artifact name and device type.
        Devices for which there are no compatible artifacts to be installed are
        considered finished successfully as well as receive status of `noartifact`.
        If there is no artifacts for the deployment, deployment will not be created
        and the 422 Unprocessable Entity status code will be returned.
      operationId: Deployments Create Deployment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeployment'
        description: New deployment that needs to be created.
        required: true
      responses:
        '201':
          content: {}
          description: New deployment created.
          headers:
            Location:
              description: URL of the newly created deployment.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An active deployment with the same parameters already exists.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Create a deployment
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/statistics/list:
    post:
      operationId: Deployment Status Statistics List
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentIdentifier'
        required: true
      responses:
        '200':
          content:
            application/json:
              example:
                - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                  stats:
                    success: 3
                    pending: 1
                    failure: 0
                    downloading: 1
                    installing: 2
                    rebooting: 3
                    noartifact: 0
                    already-installed: 0
                    aborted: 0
                    pause_before_installing: 1
                    pause_before_rebooting: 1
                    pause_before_committing: 1
                - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                  stats:
                    success: 3
                    pending: 1
                    failure: 0
                    downloading: 1
                    installing: 2
                    rebooting: 3
                    noartifact: 0
                    already-installed: 0
                    aborted: 0
                    pause_before_installing: 1
                    pause_before_rebooting: 1
                    pause_before_committing: 1
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentStatusStatisticsList200ResponseInner'
                type: array
          description: OK
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Get status count for all devices in the listed deployments (plural).
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/group/{name}:
    post:
      description: |
        Deploy software to devices belonging to the specified group.

        Artifact is auto assigned to the device from all available artifacts based
        on artifact name and device type. Devices for which there are no compatible
        artifacts to be installed are considered finished successfully as well as
        receive status of `noartifact`. If there is no artifacts for the deployment,
        deployment will not be created and the 422 Unprocessable Entity status code
        will be returned.
      operationId: Create Deployment for a Group of Devices
      parameters:
        - description: Device group name.
          in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDeploymentForGroup'
        description: New deployment that needs to be created.
        required: true
      responses:
        '201':
          content: {}
          description: New deployment created.
          headers:
            Location:
              description: URL of the newly created deployment.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An active deployment with the same parameters already exists.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Create a deployment for a group of devices
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{id}:
    get:
      description: |
        Returns the details of a particular deployment.
      operationId: Show Deployment
      parameters:
        - description: Deployment identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentV1'
          description: Successful response.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get the details of a selected deployment
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{deployment_id}/status:
    put:
      description: |
        Abort an ongoing deployment. For devices included in this deployment it means that:

        - Devices that have completed the deployment (i.e. reported final status) are not affected by the abort, and their original status is kept in the deployment report.

        - Devices that do not yet know about the deployment at time of abort will not start the deployment.

        - Devices that are in the middle of the deployment at time of abort will finish its deployment normally, but they will not be able to change its deployment status so they will perform rollback.
      operationId: Abort Deployment
      parameters:
        - description: Deployment identifier.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbortDeploymentRequest'
        description: Deployment status.
        required: true
      responses:
        '204':
          content: {}
          description: Status updated successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Abort the deployment
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{deployment_id}/statistics:
    get:
      operationId: Deployment Status Statistics
      parameters:
        - description: Deployment identifier
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                success: 3
                pending: 1
                failure: 0
                downloading: 1
                installing: 2
                rebooting: 3
                noartifact: 0
                already-installed: 0
                aborted: 0
                pause_before_installing: 1
                pause_before_rebooting: 1
                pause_before_committing: 1
              schema:
                $ref: '#/components/schemas/Statistics'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Get status count for all devices in a deployment.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{deployment_id}/devices:
    get:
      deprecated: true
      operationId: List All Devices in Deployment
      parameters:
        - description: Deployment identifier.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceWithImage'
                type: array
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        DEPRECATED: _since Wed May 19 2021_ this end-point is deprecated because it doesn't support
        pagination and will be removed in the future, please use the
        /deployments/{deployment_id}/devices/list end-point instead.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{deployment_id}/devices/list:
    get:
      operationId: List Devices in Deployment
      parameters:
        - description: Deployment identifier.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
        - description: Filter devices by status within deployment.
          in: query
          name: status
          schema:
            enum:
              - failure
              - aborted
              - pause_before_installing
              - pause_before_committing
              - pause_before_rebooting
              - downloading
              - installing
              - rebooting
              - pending
              - success
              - noartifact
              - already-installed
              - decommissioned
              - pause
              - active
              - finished
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceWithImage'
                type: array
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Get the list of devices and their respective status for the deployment
        with the given ID. The response includes devices as they get assigned
        to the deployment when checking for updates. Therefore, this endpoint
        will list all the devices only once each asks for updates and evaluates
        this deployment.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{id}/device_list:
    get:
      operationId: List Device IDs in Deployment
      parameters:
        - description: Deployment identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                - 00a0c91e6-7dec-11d0-a765-f81d4faebf6
                - 00a0c91e6-7dec-11d0-a765-f81d4faebf8
                - 00a0c91e6-7dec-11d0-a765-f81d4faebf7
              schema:
                description: List of device IDs
                items:
                  type: string
                type: array
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get the list of device IDs being part of the deployment.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/{deployment_id}/devices/{device_id}/log:
    get:
      description: |
        The response body for this endpoint include the device's deployment logs
        in text/plain format.
      operationId: Get Deployment Log for Device
      parameters:
        - description: Deployment identifier.
          in: path
          name: deployment_id
          required: true
          schema:
            type: string
        - description: Device identifier.
          in: path
          name: device_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: Successful response, including the logs in text/plain format.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get the log of a selected device's deployment
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/devices/{id}:
    delete:
      description: |
        Abort all the active and pending Deployments for the specified Device.
      operationId: Abort Deployments for a Device
      parameters:
        - description: System wide device identifier
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Operation completed successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Abort all the active and pending Deployments for a Device
      tags:
        - Deployments_Management API
    get:
      description: |
        Return the Deployments history for the specified Device, listing all its Deployments.
      operationId: Deployments List Deployments for a Device
      parameters:
        - description: System wide device identifier
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: Filter deployments by status for the given device.
          in: query
          name: status
          schema:
            enum:
              - failure
              - aborted
              - pause_before_installing
              - pause_before_committing
              - pause_before_rebooting
              - downloading
              - installing
              - rebooting
              - pending
              - success
              - noartifact
              - already-installed
              - decommissioned
              - pause
              - active
              - finished
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 20
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeviceDeploymentV1'
                type: array
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Return the Deployments history for a Device
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/devices/{id}/history:
    delete:
      description: |
        Mark as logically deleted the completed Device Deployments records for the given device.
        This effectively resets the Device Deployments history and makes the
        device eligible (again) for all the active deployments.
      operationId: Reset Device Deployments history
      parameters:
        - description: System wide device identifier
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Operation completed successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Reset the Device Deployments history
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/releases:
    get:
      deprecated: true
      description: |
        Returns a collection of releases, allows filtering by release name.

        DEPRECATED: _since Wed May 19 2021_ this end-point is deprecated because it doesn't support
        pagination and will be removed in the future, please use the
        /deployments/releases/list end-point instead.
      operationId: List Releases
      parameters:
        - description: Release name filter.
          in: query
          name: name
          schema:
            type: string
        - description: Release description filter.
          in: query
          name: description
          schema:
            type: string
        - description: Release device type filter.
          in: query
          name: device_type
          schema:
            type: string
        - description: Update type filter.
          in: query
          name: update_type
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                - name: my-app-v1.0.1
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Raspberry Pi
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                - name: my-app-v2.0.0
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 2.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
              schema:
                $ref: '#/components/schemas/ReleasesV1'
          description: Successful response.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        List releases
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/deployments/releases/list:
    get:
      deprecated: true
      description: |
        Returns a collection of releases, allows filtering by release name and sorting
        by name or last modification date.

        DEPRECATED: _since Sep 24 2023_ due to a mismatch in the capitalization of the fields of the response
        body and lack of support for advanced filters and sorting, we have deprecated this
        endpoint. Please use the v2 /deployments/releases end-point instead.
      operationId: Deployments V1 List Releases with pagination
      parameters:
        - description: Release name filter.
          in: query
          name: name
          schema:
            type: string
        - description: Release description filter.
          in: query
          name: description
          schema:
            type: string
        - description: Release device type filter.
          in: query
          name: device_type
          schema:
            type: string
        - description: Update type filter.
          in: query
          name: update_type
          schema:
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
        - description: |
            Sort the release list by the specified field and direction.
          in: query
          name: sort
          schema:
            default: name:asc
            enum:
              - artifacts_count:asc
              - artifacts_count:desc
              - modified:asc
              - modified:desc
              - name:asc
              - name:desc
              - tags:asc
              - tags:desc
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                - name: my-app-v1.0.1
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Raspberry Pi
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                - name: my-app-v2.0.0
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 2.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
              schema:
                $ref: '#/components/schemas/ReleasesV1'
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of releases matching query.
              schema:
                type: integer
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        List releases with pagination
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts:
    get:
      deprecated: true
      description: |
        Returns a collection of all artifacts.

        DEPRECATED: _since Oct 18 2021_ this end-point is deprecated because it doesn't support
        pagination and will be removed in the future, please use the
        /artifacts/list end-point instead.
      operationId: List Artifacts
      parameters:
        - description: Release name filter.
          in: query
          name: name
          schema:
            type: string
        - description: Release description filter.
          in: query
          name: description
          schema:
            type: string
        - description: Release device type filter.
          in: query
          name: device_type
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArtifactV1'
                type: array
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        List all the artifacts
      tags:
        - Deployments_Management API
    post:
      description: |
        Upload mender artifact. Multipart request with meta and artifact.
        Supports artifact [versions v1, v2, v3](https://docs.mender.io/overview/artifact#versions).
      operationId: Upload Artifact
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadArtifactRequest'
        required: true
      responses:
        '201':
          content: {}
          description: Artifact uploaded.
          headers:
            Location:
              description: URL of the newly uploaded artifact.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              example:
                error: an artifact with the same name and depends already exists
                request_id: e4dde7e9-9424-4311-8648-86e24b542410
                metadata:
                  conflict:
                    want: cookies
              schema:
                $ref: '#/components/schemas/ErrorExt'
          description: |
            An artifact with the same name and matching dependency requirements already exists.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Upload mender artifact
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/list:
    get:
      deprecated: true
      description: |
        Returns a collection of all artifacts.

        DEPRECATED: _since Tue Jul 22 2025_ we deprecated the endpoint due to performance issues.
        Please use the v2 /artifacts endpoint instead.
        In the new endpoint, we support exact and prefix matching for the various fields
      operationId: Deployments V1 List Artifacts with pagination
      parameters:
        - description: Artifact name filter.
          in: query
          name: name
          schema:
            type: string
        - description: Artifact description filter.
          in: query
          name: description
          schema:
            type: string
        - description: Artifact device type filter.
          in: query
          name: device_type
          schema:
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
        - description: |
            Sort the artifact list by the specified field and direction.
          in: query
          name: sort
          schema:
            default: name:asc
            enum:
              - name:asc
              - name:desc
              - modified:asc
              - modified:desc
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArtifactV1'
                type: array
          description: OK
          headers:
            X-Total-Count:
              description: Total number of releases matching query.
              schema:
                type: integer
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        List known artifacts
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/directupload:
    post:
      operationId: Request Direct Upload
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactUploadLink'
          description: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Request link for uploading artifact directly to the storage backend. This is an on-prem endpoint only, not available on Hosted Mender.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/directupload/{id}/complete:
    post:
      operationId: Complete Direct Upload
      parameters:
        - description: Artifact ID returned by "Request Direct Upload" API.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectUploadMetadata'
        description: Metadata for contents of the artifact.
        required: false
      responses:
        '202':
          content: {}
          description: Accepted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          content:
            application/json:
              example:
                error: not found
                request_id: b4965265-4475-4d00-8efc-840eaee5cf7b
              schema:
                $ref: '#/components/schemas/CompleteDirectUpload404Response'
          description: A pending direct upload with the given ID was not found.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Notify the server that the direct upload is completed to make it available in the artifacts API. Optionally you can provide files metadata which will be absent otherwise if skip-verify flag is present in the deployments service. This is an on-prem endpoint only, not available on Hosted Mender.
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/generate:
    post:
      description: |
        Generate a new Mender artifact from raw data and meta data. Multipart request with meta and raw file.
        Supports generating single-file updates only, using the Single File Update Module (https://hub.mender.io/t/single-file).
      operationId: Generate Artifact
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GenerateArtifactRequest'
        required: true
      responses:
        '201':
          content: {}
          description: Artifact generation request accepted and queued for processing.
          headers:
            Location:
              description: URL of the artifact going to be generated.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Upload raw data to generate a new artifact
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/{id}:
    delete:
      description: |
        Deletes the artifact from file and artifacts storage.
        Artifacts used by deployments in progress can not be deleted
        until deployment finishes.
      operationId: Delete Artifact
      parameters:
        - description: Artifact identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: The artifact deleted successfully.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Artifact used by active deployment.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Delete the artifact
      tags:
        - Deployments_Management API
    get:
      description: |
        Returns the details of a selected artifact.
      operationId: Show Artifact
      parameters:
        - description: Artifact identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                name: Application 1.0.0
                description: Johns Monday test build
                device_types_compatible:
                  - Beagle Bone
                info:
                  format: mender
                  version: 3
                updates:
                  - type_info:
                      type: rootfs-image
                    files:
                      - name: rootfs-image-1
                        checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                        size: 123
                        date: 2016-03-11T13:03:17.063+0000
                    metadata: {}
                    meta_data: []
                artifact_provides:
                  artifact_name: test
                  rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                  rootfs-image.version: test
                artifact_depends:
                  device_type:
                    - test
                clears_artifact_provides:
                  - rootfs-image.*
                size: 36891648
                modified: '2016-03-11T13:03:17.063493443Z'
              schema:
                $ref: '#/components/schemas/ArtifactV1'
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get the details of a selected artifact
      tags:
        - Deployments_Management API
    put:
      description: |
        Edit description. Artifact is not allowed to be edited if it was used
        in any deployment.
      operationId: Update Artifact Info
      parameters:
        - description: Artifact identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtifactUpdateV1'
        required: false
      responses:
        '204':
          content: {}
          description: The artifact metadata updated successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unprocessable Entity.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Update description of a selected artifact
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/artifacts/{id}/download:
    get:
      description: |
        Generates signed URL for downloading artifact file. URI can be used only
        with GET HTTP method. Link supports such HTTP headers: 'Range',
        'If-Modified-Since', 'If-Unmodified-Since' It is valid for specified
        period of time.
      operationId: Download Artifact
      parameters:
        - description: Artifact identifier.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactLink'
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get the download link of a selected artifact
      tags:
        - Deployments_Management API
  /api/management/v1/deployments/limits/storage:
    get:
      description: |
        Get storage limit and current storage usage for currently logged in user.
        If the limit value is 0 it means there is no limit for storage for logged in user.
      operationId: Deployments Get Storage Usage
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageLimit'
          description: Successful response.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Get storage limit and current storage usage
      tags:
        - Deployments_Management API
  /api/management/v2/deployments/deployments:
    get:
      description: |
        Returns a filtered collection of deployments in the system. While you can provide multiple
        deployment identifiers, and multiple names to get the multiple deployments you cannot mix
        the ids and names in a one query expecting to get deployments that match both names or ids.
        The endpoint will return the deployments that match the ids and the name, if combined.
      operationId: Deployments V2 List Deployments
      parameters:
        - description: |
            Deployment identifier. You can provide it multiple times to query a set of deployments.
          in: query
          name: id
          schema:
            type: string
        - description: |
            Deployment name. You can provide it multiple times to query a set of deployments.
          in: query
          name: name
          schema:
            type: string
        - description: Deployment status filter.
          in: query
          name: status
          schema:
            enum:
              - inprogress
              - finished
              - pending
            type: string
        - description: |
            Deployment type filter.
          in: query
          name: type
          schema:
            enum:
              - software
              - configuration
            type: string
        - description: Results page number
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
        - description: List only deployments created before and equal to Unix timestamp (UTC)
          in: query
          name: created_before
          schema:
            type: integer
        - description: List only deployments created after and equal to Unix timestamp (UTC)
          in: query
          name: created_after
          schema:
            type: integer
        - description: |
            Supports sorting the deployments list by creation date.
          in: query
          name: sort
          schema:
            enum:
              - asc
              - desc
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DeploymentV2'
                type: array
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of deployments matching query.
              schema:
                type: integer
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: List all the deployments matching the specified filter parameters
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/deployments/releases:
    delete:
      description: |
        Deletes releases with names provided in the message body.
        Releases used by deployments in progress can not be deleted
        until deployment finishes.
      operationId: Delete Releases
      parameters:
        - description: Name of the release to be deleted
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '204':
          content: {}
          description: Releases deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleasesDeleteError'
          description: Conflict.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: Delete the releases with given names
      tags:
        - Deployments_v2_Management API
    get:
      description: |
        Returns a collection of releases, allows filtering by release name and sorting
        by name or last modification date.
      operationId: Deployments V2 List Releases with pagination
      parameters:
        - description: Release name filter.
          in: query
          name: name
          schema:
            type: string
        - description: Tag filter.
          explode: true
          in: query
          name: tag
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Update type filter.
          in: query
          name: update_type
          schema:
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
        - description: |
            Sort the release list by the specified field and direction.
          in: query
          name: sort
          schema:
            default: name:asc
            enum:
              - artifacts_count:asc
              - artifacts_count:desc
              - modified:asc
              - modified:desc
              - name:asc
              - name:desc
              - tags:asc
              - tags:desc
            type: string
      responses:
        '200':
          content:
            application/json:
              example:
                - name: my-app-v1.0.1
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 1.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Raspberry Pi
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
                - name: my-app-v2.0.0
                  artifacts:
                    - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
                      name: Application 2.0.0
                      description: Johns Monday test build
                      device_types_compatible:
                        - Beagle Bone
                      info:
                        format: mender
                        version: 3
                      updates:
                        - type_info:
                            type: rootfs-image
                          files:
                            - name: rootfs-image-1
                              checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                              size: 123
                              date: 2016-03-11T13:03:17.063+0000
                          metadata: {}
                          meta_data: []
                      artifact_provides:
                        artifact_name: test
                        rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                        rootfs-image.version: test
                      artifact_depends:
                        device_type:
                          - test
                      clears_artifact_provides:
                        - rootfs-image.*
                      size: 36891648
                      modified: '2016-03-11T13:03:17.063493443Z'
              schema:
                $ref: '#/components/schemas/ReleasesV2'
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of releases matching query.
              schema:
                type: integer
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        List releases
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/deployments/releases/{release_name}:
    get:
      description: |
        Returns the release with given name.
      operationId: Get Release with given name
      parameters:
        - description: Name of the release
          in: path
          name: release_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseV2'
          description: Successful response.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Get release
      tags:
        - Deployments_v2_Management API
    patch:
      description: |
        Updates the Release object.
      operationId: Update Release information
      parameters:
        - description: Name of the release
          in: path
          name: release_name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseUpdate'
        required: false
      responses:
        '204':
          content: {}
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Update selected fields of the Release object.
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/deployments/releases/{release_name}/tags:
    put:
      description: |
        Assigns tags to a release. The tags associated with the release will be
        replaced with the ones defined in the request body.

        LIMITATIONS:
          * Max 20 tags can be assigned to a single release.
          * There can be no more than 100 unique tag keys in total.
      operationId: Assign Release Tags
      parameters:
        - description: Name of the release
          in: path
          name: release_name
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tags'
        required: false
      responses:
        '204':
          content: {}
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              example:
                error: the total number of unique tags has been exceeded
                request_id: f7881e82-0492-49fb-b459-795654e7188a
              schema:
                $ref: '#/components/schemas/Error'
          description: Too many unique tag keys in use.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Update and replace the tags of a release.
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/releases/all/tags:
    get:
      operationId: List Release Tags
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tags'
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          content:
            application/json:
              example:
                error: the total number of unique tags has been exceeded
                request_id: f7881e82-0492-49fb-b459-795654e7188a
              schema:
                $ref: '#/components/schemas/Error'
          description: Too many unique tag keys in use.
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Lists all available tags for releases.
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/releases/all/types:
    get:
      operationId: List Release Types
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTypes'
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Lists all release update types.
      tags:
        - Deployments_v2_Management API
  /api/management/v2/deployments/artifacts:
    get:
      description: |
        Returns a collection of all artifacts sorted by name.
      operationId: Deployments V2 List Artifacts with pagination
      parameters:
        - description: |
            Artifact(s) name(s) filter.
            Multiple names can be provided (e.g., `?name=foo&name=bar`).
            Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
            Note: when using prefix matching you may pass only a single value and you cannot combine
            prefix matching and exact matching in the same request.
          in: query
          name: name
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
          examples:
            single:
              summary: Get artifact with the given name.
              value:
                - foo
            multi:
              summary: Get artifact matching multiple names by repeating the query parameter.
              value:
                - foo
                - bar
            prefix:
              summary: Get artifact with the specified prefix
              value:
                - foo*
        - description: |
            Artifact description filter.
            Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
          in: query
          name: description
          schema:
            type: string
        - description: |
            Artifact device type filter.
            Supports exact matching or prefix matching by adding `*` to the end (e.g., `foo*`).
          in: query
          name: device_type
          schema:
            type: string
        - description: Starting page.
          in: query
          name: page
          schema:
            default: 1
            type: integer
        - description: Maximum number of results per page.
          in: query
          name: per_page
          schema:
            default: 20
            maximum: 500
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ArtifactV2'
                type: array
          description: OK
          headers:
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
      summary: |
        Lists known artifacts.
      tags:
        - Deployments_v2_Management API
  /api/devices/v1/authentication/auth_requests:
    post:
      summary: Submit an authentication request
      description: |
        The device presents its unique identity data and public key, and signs the request with its private key.
        If the request is valid and the device is known to the system, a valid JWT authentication token is issued.

        Unless the device is pre-authorized, the very first authentication request from a device will
        always result in a 'HTTP 401 Unauthorized' response. At the same time, the identity data is recorded for
        later inspection by the user, who can then explicitly accept or reject the device via the web GUI.
        A subsequent authentication request will reflect this decision.

        Note that when the JWT expires, the device must renew the JWT by sending a new authentication request.
      operationId: DeviceAuth Authenticate Device
      tags:
        - Device_Authentication_Device API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      parameters:
        - name: X-MEN-Signature
          in: header
          required: true
          description: |
            Request signature.
            The request signature depends on the public key submitted in the AuthRequest.
            A summary of signature algorithms and format follows:
            | Type       | Digest              | Format                   | Algorithm    |
            |------------|---------------------|--------------------------|--------------|
            | RSA        | SHA256(AuthRequest) | Base64(Signature)        | [RFC2313]    |
            | ECDSA      | SHA256(AuthRequest) | Base64(ASN.1(SEQ{R, S})) | [ANSI x9.62] |
            | Ed25519    | AuthRequest         | Base64(Signature)        | [RFC8032]    |
            *Remark:*
            For ECDSA, the signature constitutes two integers (R and S)
            in which case the binary signature is taken as the ASN.1 sequence of
            the two numbers in the given order.
          schema:
            type: string
      responses:
        '200':
          description: Authentication successful - a new JWT is issued and returned.
          content:
            application/json:
              schema:
                type: string
                example: |
                  eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImp0aSI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsImlzcyI6Ik1lbmRlciIsInN1YiI6IjlmNzM2YmNiMjhiZmFhOTg5YjVmNWUxNDA5ZGJmMGVhYzdhNjYxMjZiNjMyZDAzYWYwZmUzNGFjMjhiZjRhNzIifQ.PArg_WuoQkOiJ4kDoHYbQRjnxykeF1lIlsgJfUryhivnip2AHz5bkxxaxF20XTq9mIzSDonTSukfOtkaxJTZXjCMHjgh50iwa6_pUivIYWsIJW2O9t_M9T_SC-7Xu7IhE_iKQFb2NXxVfAG4nZKrheUM4MJBt8SxCawT2EOPopiLeIC6MOFBu_sPa9RsagKSZCRaLTBWVhmEGbfn19tLOX3Z06DZql61G-VY-YuyOlBjpEsCc4HiA1cXIdncCZKugrONOa44_m4yx0VsgRg4jCd2VO-Is-A96Jw3zkZshoD2cPXVSKAhFdhHja447ftuYYRq9kIQghKi3hfsPgyFZQ
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
  /api/internal/v1/devauth/alive:
    get:
      operationId: DeviceAuth Internal Check Liveliness
      tags:
        - Device_Authentication_Internal API
      summary: Trivial endpoint that unconditionally returns an empty 204 response whenever the API handler is running correctly.
      responses:
        '204':
          description: Service is up and running
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/health:
    get:
      operationId: DeviceAuth Internal Check Health
      tags:
        - Device_Authentication_Internal API
      summary: Check the health of the service
      responses:
        '204':
          description: Service is healthy and all dependencies are up and running.
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          description: Service unhealthy / not ready to accept traffic. At least one dependency is not running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example2:
                  value:
                    error: 'error reaching MongoDB: context deadline exceeded'
                    request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
  /api/internal/v1/devauth/tokens/verify:
    post:
      operationId: DeviceAuth Internal Verify JWT
      tags:
        - Device_Authentication_Internal API
      summary: Check the validity of a token
      description: Besides the basic validity check, checks the token expiration time and user-initiated token revocation. Services which intend to use it should be correctly set up in the gateway's configuration.
      parameters:
        - name: Authorization
          in: header
          description: The token in base64-encoded form.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The token is valid.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tokens:
    delete:
      operationId: DeviceAuth Internal Revoke Device Tokens
      tags:
        - Device_Authentication_Internal API
      summary: Delete device tokens
      description: This endpoint is designed to be used for device decommissioning and tenant account suspension purpose. For device decommissioning purpose both tenant_id and device_id parameters must be set. When both tenant_id and device_id parameters are set, all tokens will be deleted for device with given device_id. For tenant account suspension purpose only tenant_id parameter must be set. When device_id parameter is not set (only tenant_id parameter is set) all tokens for all tenant devices will be deleted.
      parameters:
        - name: tenant_id
          in: query
          required: true
          schema:
            type: string
        - name: device_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '204':
          description: Tokens deleted.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenant/{tenant_id}/limits/max_devices:
    get:
      operationId: DeviceAuth Internal Get Device Limit
      tags:
        - Device_Authentication_Internal API
      summary: Max device count limit
      parameters:
        - name: tenant_id
          description: Tenant ID.
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limit'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      operationId: DeviceAuth Internal Update Device Limit
      tags:
        - Device_Authentication_Internal API
      summary: Update max device count limit
      parameters:
        - name: tenant_id
          description: Tenant ID.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Limit'
      responses:
        '204':
          description: Limit information updated.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeviceAuth Internal Clear Device Limit
      tags:
        - Device_Authentication_Internal API
      summary: Remove max device count limit
      parameters:
        - name: tenant_id
          description: Tenant ID.
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Limit information deleted.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants:
    post:
      operationId: DeviceAuth Internal Create Tenant
      tags:
        - Device_Authentication_Internal API
      summary: Provision a new tenant
      description: Sets up all tenant-related infrastructure, e.g. a migrated tenant's database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
      responses:
        '201':
          description: Tenant was successfully provisioned.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants/{tid}/devices/{did}:
    delete:
      operationId: DeviceAuth Internal Delete Device
      tags:
        - Device_Authentication_Internal API
      summary: Delete a device from deviceauth service.
      parameters:
        - name: tid
          in: path
          required: true
          schema:
            type: string
        - name: did
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Device deleted successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants/{tid}/devices/{did}/external:
    put:
      operationId: DeviceAuth Internal Set external identity
      tags:
        - Device_Authentication_Internal API
      summary: Replace the external identity of a device.
      parameters:
        - name: tid
          in: path
          description: Tenant identifier.
          required: true
          schema:
            type: string
        - name: did
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalDevice'
      responses:
        '204':
          description: Device identity updated successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants/{tid}/devices/{did}/status:
    get:
      operationId: DeviceAuth Internal Device Status
      tags:
        - Device_Authentication_Internal API
      summary: Get the status of a tenant's device
      description: Returns the overall status of the device, computed over the statuses of its various authsets.
      parameters:
        - name: tid
          in: path
          description: Tenant identifier.
          required: true
          schema:
            type: string
        - name: did
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants/{tid}/devices:
    get:
      operationId: DeviceAuth Internal List Devices
      tags:
        - Device_Authentication_Internal API
      summary: Get a list of tenant's devices.
      description: Provides a list of tenant's devices, sorted by creation date, with optional device status filter.
      parameters:
        - name: tid
          in: path
          description: Tenant identifier.
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Device status filter. If not specified, all devices are listed.
          required: false
          schema:
            type: string
            enum:
              - pending
              - accepted
              - rejected
              - preauthorized
              - noauth
        - name: id
          in: query
          description: Device ID filter. Can be repeated to query a set of devices.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: page
          in: query
          description: Results page number.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          required: false
          schema:
            type: integer
            default: 20
            maximum: 500
      responses:
        '200':
          description: An array of devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          headers:
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/devauth/tenants/{tid}/devices/count:
    get:
      operationId: DeviceAuth Internal Count Devices
      summary: Count number of devices, optionally filtered by status.
      tags:
        - Device_Authentication_Internal API
      parameters:
        - name: tid
          in: path
          description: Tenant identifier.
          required: true
          schema:
            type: string
        - name: status
          in: query
          description: Device status filter, one of 'pending', 'accepted', 'rejected', 'noauth'. Default is 'all devices'.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Device count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices:
    get:
      operationId: DeviceAuth Management List Devices
      security:
        - ManagementJWT: []
      summary: List devices sorted by age and optionally filter on device status.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: status
          in: query
          description: Device status filter. If not specified, all devices are listed.
          required: false
          schema:
            type: string
            enum:
              - pending
              - accepted
              - rejected
              - preauthorized
              - noauth
        - name: id
          in: query
          description: Device ID filter. Can be repeated to query a set of devices.
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: true
        - name: page
          in: query
          description: Results page number
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          required: false
          schema:
            type: integer
            default: 20
            maximum: 500
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: An array of devices.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
          headers:
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: DeviceAuth Management Preauthorize
      security:
        - ManagementJWT: []
      summary: Submit a preauthorized device.
      description: Authorize a device identity with the server backend. On success the device identity is marked as 'preauthorized', and once the device connects and sends it's first authentication request the device automatically become 'accepted' without explicit user intervention.
      tags:
        - Device_Authentication_Management API
      parameters:
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreAuthSet'
      responses:
        '201':
          description: Device submitted.
          headers:
            Location:
              description: URL of the newly created device.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '409':
          description: Device already exists. Response contains conflicting device.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices/search:
    post:
      operationId: DeviceAuth Management Search Devices
      security:
        - ManagementJWT: []
      summary: Query for devices. Returns a list of matching devices with AuthSets sorted by age.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: page
          in: query
          description: Results page number
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          required: false
          schema:
            type: integer
            default: 20
            maximum: 500
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        description: Device status filter. All properties can be either a single string or an array of strings.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: array
                  description: Device status filter. Can be an array for querying devices from multiple device statuses.
                  items:
                    type: string
                    enum:
                      - pending
                      - accepted
                      - rejected
                      - preauthorized
                      - noauth
                id:
                  type: array
                  description: Device ID filter. Can be a string for querying for a single device.
                  items:
                    type: string
                    description: Device ID
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                description: Array of devices
                items:
                  $ref: '#/components/schemas/Device'
          headers:
            Link:
              description: Pagination link header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices/{id}:
    get:
      operationId: DeviceAuth Management Get Device
      security:
        - ManagementJWT: []
      summary: Get a particular device.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Device found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: DeviceAuth Management Decommission device
      security:
        - ManagementJWT: []
      summary: Remove device and associated authentication set
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '204':
          description: Device decommissioned.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices/{id}/auth/{aid}:
    delete:
      operationId: DeviceAuth Management Remove authentication
      security:
        - ManagementJWT: []
      summary: Remove (dismiss) the device authentication set
      description: Removes the device authentication set. Removing 'accepted' authentication set is equivalent to rejecting device and removing authentication set. If there is only one authentication set for the device and the device is 'preauthorized' then the device will also be deleted.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - name: aid
          in: path
          description: Authentication data set identifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '204':
          description: Device authentication set deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices/{id}/auth/{aid}/status:
    put:
      operationId: DeviceAuth Management Set Authentication Status
      security:
        - ManagementJWT: []
      summary: Update the device authentication set status
      description: 'Sets the status of an authentication data set of selected value. Valid state transitions: - ''pending'' -> ''accepted'' - ''pending'' -> ''rejected'' - ''rejected'' -> ''accepted'' - ''accepted'' -> ''rejected'''
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - name: aid
          in: path
          description: Authentication data set identifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
      responses:
        '204':
          description: The device authentication data set status was successfully updated.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Request cannot be fulfilled e.g. due to exceeded limit on maximum accepted devices (see error message).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: DeviceAuth Management Get Authentication Status
      security:
        - ManagementJWT: []
      summary: Get the device authentication set status
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - name: aid
          in: path
          description: Authentication data set identifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Successful response - the device's authentication set status is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/devices/count:
    get:
      operationId: DeviceAuth Management Count Devices
      security:
        - ManagementJWT: []
      summary: Count number of devices, optionally filtered by status.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: status
          in: query
          description: Device status filter, one of 'pending', 'accepted', 'rejected', 'noauth', 'preauthorized'. Default is 'all devices', meaning devices with any of these statuses will be counted.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Device count.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Count'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/tokens/{id}:
    delete:
      operationId: DeviceAuth Management Revoke API Token
      security:
        - ManagementJWT: []
      summary: Revoke JWT with given id
      description: Deletes the token, effectively revoking it. The device must apply for a new one with a new authentication request. The token 'id' corresponds to the standard 'jti' claim.
      tags:
        - Device_Authentication_Management API
      parameters:
        - name: id
          in: path
          description: Unique token identifier('jti').
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/RequestId'
      responses:
        '204':
          description: The token was successfully deleted.
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v2/devauth/limits/max_devices:
    get:
      operationId: DeviceAuth Management Get Device Limit
      security:
        - ManagementJWT: []
      summary: Obtain limit of accepted devices.
      tags:
        - Device_Authentication_Management API
      parameters:
        - $ref: '#/components/parameters/RequestId'
      responses:
        '200':
          description: Usage statistics and limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Limit'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/devices/v1/deviceconfig/configuration:
    get:
      operationId: DeviceConfig Get Device Configuration
      tags:
        - Device_configure_Device API
      summary: Query the configuration store; retrieve all key-value pairs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceAPIConfiguration'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
    put:
      operationId: DeviceConfig Report Device Configuration
      tags:
        - Device_configure_Device API
      summary: Set a key-value pair store, updating if existing, removing if empty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceAPIConfiguration'
      responses:
        '204':
          description: Created
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
  /api/internal/v1/deviceconfig/health:
    get:
      tags:
        - Device_configure_Internal API
      summary: Get health status of service
      operationId: DeviceConfig Internal Check Health
      responses:
        '204':
          description: Service is healthy.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/alive:
    get:
      tags:
        - Device_configure_Internal API
      summary: Get service liveliness status.
      operationId: DeviceConfig Internal Check Liveliness
      responses:
        '204':
          description: Service is up and serving requests.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/tenants:
    post:
      tags:
        - Device_configure_Internal API
      operationId: DeviceConfig Internal Provision tenant
      summary: Initialize internal state for a new tenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
      responses:
        '201':
          description: Tenant initialized successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/tenants/{tenantId}:
    delete:
      operationId: DeviceConfig Internal Delete Tenant
      tags:
        - Device_configure_Internal API
      summary: Delete all the data for given tenant.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant.
      responses:
        '204':
          description: All the tenant data have been successfully deleted.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/tenants/{tenantId}/devices:
    post:
      tags:
        - Device_configure_Internal API
      operationId: DeviceConfig Internal Provision device
      summary: Register a new device with the deviceconfig service.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDevice'
      responses:
        '201':
          description: Device was provisioned successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/tenants/{tenantId}/devices/{deviceId}:
    delete:
      tags:
        - Device_configure_Internal API
      operationId: DeviceConfig Internal Decommission device
      summary: Remove a device from the deviceconfig service.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the target device.
      responses:
        '204':
          description: Device was deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconfig/tenants/{tenantId}/configurations/device/{deviceId}/deploy:
    post:
      operationId: DeviceConfig Internal Deploy Device Configuration
      tags:
        - Device_configure_Internal API
      summary: Deploy the device's configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfigurationDeployment'
      parameters:
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the device.
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of the tenant.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfigurationDeploymentResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v1/deviceconfig/configurations/device/{deviceId}:
    get:
      operationId: DeviceConfig Management Get Device Configuration
      tags:
        - Device_configure_Management API
      summary: Get the device's configuration
      parameters:
        - in: path
          name: deviceId
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the device to query.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConfiguration'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    put:
      operationId: DeviceConfig Management Set Device Configuration
      tags:
        - Device_configure_Management API
      summary: Set the device's configuration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagementAPIConfiguration'
      parameters:
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the device to query.
      responses:
        '204':
          description: Success
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconfig/configurations/device/{deviceId}/deploy:
    post:
      operationId: DeviceConfig Management Deploy Device Configuration
      tags:
        - Device_configure_Management API
      summary: Deploy the device's configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewConfigurationDeployment'
      parameters:
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the device.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewConfigurationDeploymentResponse'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/devices/v1/deviceconnect/connect:
    get:
      tags:
        - Device_connect_Device API
      operationId: DeviceConnect Connect
      summary: Connect the device and make it available to the server.
      description: Calling /connect will upgrade the connection to a persistent websocket connection and make the device available to the management API. The device must provide DeviceJWT identity either as Authorization (Bearer) header or as a cookie named 'JWT'.
      parameters:
        - in: header
          name: Connection
          schema:
            type: string
            enum:
              - Upgrade
          description: Standard websocket request header.
        - in: header
          name: Upgrade
          schema:
            type: string
            format: base64
            enum:
              - websocket
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Key
          schema:
            type: string
            format: base64
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Version
          schema:
            type: integer
            enum:
              - 13
          description: Standard websocket request header.
      responses:
        '101':
          description: |
            Successful response - change to websocket protocol.
          headers:
            Sec-Websocket-Accept:
              schema:
                type: string
                format: base64
              description: Standard websocket upgrade response header.
            Upgrade:
              schema:
                type: string
                enum:
                  - websocket
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
  /api/internal/v1/deviceconnect/health:
    get:
      tags:
        - Device_connect_Internal API
      summary: Get health status of service
      operationId: DeviceConnect Internal Check Health
      responses:
        '204':
          description: Service is healthy.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/alive:
    get:
      tags:
        - Device_connect_Internal API
      summary: Get service liveliness status.
      operationId: DeviceConnect Internal Check Liveliness
      responses:
        '204':
          description: Service is up and serving requests.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/shutdown:
    get:
      tags:
        - Device_connect_Internal API
      summary: Shutdown the service.
      operationId: DeviceConnect Internal Shutdown
      responses:
        '202':
          description: The service started the graceful shutdown procedure.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/tenants/{tenantId}:
    delete:
      operationId: Delete Tenant
      tags:
        - Device_connect_Internal API
      summary: Delete all the data for given tenant.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant.
      responses:
        '204':
          description: All the tenant data have been successfully deleted.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/tenants/{tenantId}/devices:
    post:
      tags:
        - Device_connect_Internal API
      operationId: DeviceConnect Internal Provision device
      summary: Register a new device with the deviceconnect service.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvisionDevice'
      responses:
        '201':
          description: Device was provisioned successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/tenants/{tenantId}/devices/{deviceId}:
    delete:
      tags:
        - Device_connect_Internal API
      operationId: DeviceConnect Internal Decomission device
      summary: Remove a device from the deviceconnect service.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the target device.
      responses:
        '202':
          description: Device was deleted successfully
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/tenants/{tenantId}/devices/{deviceId}/check-update:
    post:
      tags:
        - Device_connect_Internal API
      operationId: DeviceConnect Internal Check Update
      summary: Trigger check-update for the Mender client running on the device
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: ID for the target device.
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/deviceconnect/tenants/{tenantId}/devices/{deviceId}/send-inventory:
    post:
      tags:
        - Device_connect_Internal API
      operationId: DeviceConnect Internal Send Inventory
      summary: Trigger send-inventory for the Mender client running on the device
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: deviceId
          required: true
          schema:
            type: string
          description: ID for the target device.
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v1/deviceconnect/devices/{id}:
    get:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Get device
      summary: Fetch the state of a device.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionState'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/devices/{id}/check-update:
    post:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Check Update
      summary: Trigger check-update for the Mender client running on the device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/devices/{id}/connect:
    get:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Connect
      summary: Establish permanent connection with device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
        - in: header
          name: Connection
          schema:
            type: string
            enum:
              - Upgrade
          description: Standard websocket request header.
        - in: header
          name: Upgrade
          schema:
            type: string
            format: base64
            enum:
              - websocket
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Key
          schema:
            type: string
            format: base64
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Version
          schema:
            type: integer
            enum:
              - 13
          description: Standard websocket request header.
      responses:
        '101':
          description: |
            Successful response - change to websocket protocol.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/devices/{id}/download:
    get:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Download
      summary: Download a file from the device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
        - in: query
          name: path
          required: true
          schema:
            type: string
          description: Path of the file on the device.
      responses:
        '200':
          description: The content of the file will be returned in the response body
          headers:
            X-MEN-File-Path:
              schema:
                type: string
              description: The path of the file on the device
            X-MEN-File-UID:
              schema:
                type: integer
              description: The numerical UID of the file on the device
            X-MEN-File-GID:
              schema:
                type: integer
              description: The numerical GID of the file on the device
            X-MEN-File-Mode:
              schema:
                type: string
              description: The octal representation of the mode of the file on the device
            X-MEN-File-Size:
              schema:
                type: integer
              description: The size of the file on the device
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/devices/{id}/send-inventory:
    post:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Send Inventory
      summary: Trigger send-inventory for the Mender client running on the device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
      responses:
        '202':
          description: Accepted
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/sessions/{session_id}/playback:
    get:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Playback
      summary: Establish a connection for playing back a session
      parameters:
        - in: path
          name: session_id
          required: true
          schema:
            type: string
          description: ID for the session to play back.
        - in: query
          name: sleep_ms
          required: false
          schema:
            type: integer
          description: Time in millisconds to sleep between the subsequent playback data writes.
        - in: header
          name: Connection
          schema:
            type: string
            enum:
              - Upgrade
          description: Standard websocket request header.
        - in: header
          name: Upgrade
          schema:
            type: string
            format: base64
            enum:
              - websocket
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Key
          schema:
            type: string
            format: base64
          description: Standard websocket request header.
        - in: header
          name: Sec-Websocket-Version
          schema:
            type: integer
            enum:
              - 13
          description: Standard websocket request header.
      responses:
        '101':
          description: |
            Successful response - change to websocket protocol.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/deviceconnect/devices/{id}/upload:
    put:
      tags:
        - Device_connect_Management API
      operationId: DeviceConnect Management Upload
      summary: Upload a file to the device
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the device.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUpload'
      responses:
        '201':
          description: The file was successfully uploaded
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/devices/v1/inventory/device/attributes:
    put:
      tags:
        - Device_inventory_Device API
      summary: Replace the set of attributes for a device
      description: |
        Replaces the attribute set for the authenticated device with the provided one.
        The device ID is retrieved from the authorization header.

        This method replaces all the attributes with the new set:

        * attributes not provided in the set are removed from the db

        * the values of existing attributes are overwritten

        * attributes assigned for the first time are automatically created
      operationId: Replace Attributes
      requestBody:
        description: A list of attribute descriptors.
        content:
          application/json:
            schema:
              title: ListOfAttributes
              type: array
              example:
                - name: ip_addr
                  value: 1.2.3.4
                  description: IP address
                - name: mac_addr
                  value: 00.01:02:03:04:05
                  description: MAC address
              items:
                $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        '200':
          description: Attributes were uploaded successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
    patch:
      tags:
        - Device_inventory_Device API
      summary: Assign a set of attributes for a device
      description: |
        Saves the provided attribute set for the authenticated device.
        The device ID is retrieved from the authorization header.

        This method has upsert semantics:

        * the values of existing attributes are overwritten

        * attributes assigned for the first time are automatically created
      operationId: Assign Attributes
      requestBody:
        description: A list of attribute descriptors.
        content:
          application/json:
            schema:
              title: ListOfAttributes
              type: array
              example:
                - name: ip_addr
                  value: 1.2.3.4
                  description: IP address
                - name: mac_addr
                  value: 00.01:02:03:04:05
                  description: MAC address
              items:
                $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        '200':
          description: Attributes were uploaded successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - DeviceJWT: []
  /api/internal/v1/inventory/health:
    get:
      tags:
        - Device_inventory_Internal API
      summary: Check the health of the service
      operationId: Inventory Internal Check Health
      responses:
        '204':
          description: |
            Service is healthy and all dependencies are up and running.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          description: |
            Service unhealthy / not ready to accept traffic. At least one dependency is not running.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              example:
                error: 'error reaching MongoDB: context deadline exceeded'
                request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
  /api/internal/v1/inventory/alive:
    get:
      tags:
        - Device_inventory_Internal API
      summary: |
        Trivial endpoint that unconditionally returns an empty 200 response whenever the API handler is running correctly.
      operationId: Inventory Internal Check Liveliness
      responses:
        '204':
          description: Service is up and running.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants:
    post:
      tags:
        - Device_inventory_Internal API
      summary: Create tenant
      description: |
        Create a tenant with provided configuration.
      operationId: Inventory Internal Create Tenant
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TenantNew'
        required: true
      responses:
        '201':
          description: The tenant was created successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/devices:
    post:
      tags:
        - Device_inventory_Internal API
      summary: Create a device resource with the supplied set of attributes
      operationId: Initialize Device
      parameters:
        - name: tenant_id
          in: path
          description: ID of given tenant.
          required: true
          schema:
            type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DeviceNew'
        required: true
      responses:
        '201':
          description: The device was successfully created.
          headers:
            Location:
              description: URI for the newly created 'Device' resource.
              schema:
                type: string
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/devices/{device_id}:
    delete:
      tags:
        - Device_inventory_Internal API
      summary: Remove a device from the inventory service
      operationId: Delete Device
      parameters:
        - name: tenant_id
          in: path
          description: ID of given tenant.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: ID of given device.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device removed
          content: {}
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/devices/status/{status}:
    post:
      tags:
        - Device_inventory_Internal API
      summary: Update the status of a list of devices
      description: |
        An API end-point that allows to bulk update the status of a list
        of devices.
      operationId: Update Status of Devices
      parameters:
        - name: tenant_id
          in: path
          description: ID of given tenant.
          required: true
          schema:
            type: string
        - name: status
          in: path
          description: New status to set for the specified devices.
          required: true
          schema:
            type: string
      requestBody:
        description: List of devices.
        content:
          '*/*':
            schema:
              type: array
              description: A list of devices to update.
              example:
                - id: ff8f7099-d842-42f2-9d5b-46a9ad13f90a
                  revision: 3
                - id: 80f3ad8f-40f2-429a-8931-b47cebbbe9b3
                  revision: 5
              items:
                $ref: '#/components/schemas/DeviceUpdate'
        required: true
      responses:
        '200':
          description: The operation completed successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/device/{device_id}/attribute/scope/{scope}:
    patch:
      tags:
        - Device_inventory_Internal API
      summary: Update multiple inventory attributes in a single scope for a device
      description: |
        An API end-point that allows to  update the inventory attributes in
        a single scope for a device.
      operationId: Update Inventory for a Device
      parameters:
        - name: If-Unmodified-Since
          in: header
          description: Skips updating the device if modified after the given RFC1123 timestamp.
          required: false
          schema:
            type: string
        - name: tenant_id
          in: path
          description: ID of given tenant.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: ID of given device.
          required: true
          schema:
            type: string
        - name: scope
          in: path
          description: Scope of the inventory attributes.
          required: true
          schema:
            type: string
      requestBody:
        description: List of inventory attributes to set.
        content:
          '*/*':
            schema:
              type: array
              description: A list of attribute descriptors.
              items:
                $ref: '#/components/schemas/Attribute'
        required: true
      responses:
        '200':
          description: Device inventory successfully updated.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '412':
          description: 'Precondition failed: If-Unmodified-Since condition not met'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/devices/{device_id}/groups:
    get:
      tags:
        - Device_inventory_Internal API
      summary: Get a list of groups the device belongs to
      operationId: Get Device Groups
      parameters:
        - name: tenant_id
          in: path
          description: ID of given tenant.
          required: true
          schema:
            type: string
        - name: device_id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Successful response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Groups'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/inventory/tenants/{tenant_id}/devices/{device_id}/reindex:
    post:
      tags:
        - Device_inventory_Internal API
      summary: Start reindexing device attributes.
      operationId: Start Re-indexing
      parameters:
        - name: service
          in: query
          description: The name of the calling service.
          schema:
            type: string
        - name: device_id
          in: path
          description: ID of the device that needs reindexing.
          required: true
          schema:
            type: string
        - name: tenant_id
          in: path
          description: ID of tenant owning the device.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Attributes have been re-indexed.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v2/inventory/tenants/{tenant_id}/filters/search:
    post:
      tags:
        - Device_inventory_filters_and_search_Internal API
      summary: Search device inventories based on attributes
      description: |
        Returns a paged collection of devices and their attributes.

        It accepts optional filters and sort parameters as body parameters.
      operationId: Inventory Internal V2 Search Device Inventories
      parameters:
        - name: tenant_id
          in: path
          description: Tenant ID.
          required: true
          schema:
            type: string
      requestBody:
        description: The search and sort parameters of the filter
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: number
                  description: Starting page.
                  format: integer
                per_page:
                  type: number
                  description: Number of results per page.
                  format: integer
                device_ids:
                  type: array
                  description: List of device IDs
                  items:
                    type: string
                    description: Attribute filter predicate
                text:
                  type: string
                  description: Free-text search query
                filters:
                  type: array
                  description: List of filter predicates, chained with boolean AND operators to build the search condition definition.
                  items:
                    $ref: '#/components/schemas/FilterPredicate'
                sort:
                  type: array
                  description: List of ordered sort criterias
                  items:
                    $ref: '#/components/schemas/SortCriteria'
                attributes:
                  type: array
                  description: List of attributes to select and return
                  items:
                    $ref: '#/components/schemas/SelectAttribute'
        required: false
      responses:
        '200':
          description: Successful response.
          headers:
            X-Total-Count:
              description: Custom header indicating the total number of devices for the given query parameters
              schema:
                type: string
          content:
            application/json:
              schema:
                title: ListOfDevices
                type: array
                items:
                  $ref: '#/components/schemas/DeviceInventory'
              example:
                - id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
                  attributes:
                    - name: ip_addr
                      scope: inventory
                      value: 1.2.3.4
                      description: IP address
                    - name: mac_addr
                      scope: inventory
                      value: 00.01:02:03:04:05
                      description: MAC address
                  updated_ts: '2016-10-03T16:58:51.639Z'
                - id: 76f40e5956c699e327489213df4459d1923e1a806603def19d417d004a4a3ef
                  attributes:
                    - name: mac
                      scope: inventory
                      value: '00:01:02:03:04:05'
                      description: MAC address
                  updated_ts: '2016-10-04T18:24:21.432Z'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v1/inventory/devices:
    get:
      tags:
        - Device_inventory_Management API
      summary: List devices inventories
      description: |
        Returns a paged collection of devices and their attributes.
        Accepts optional search and sort parameters.

        **Searching**<br/>
        Searching by attributes values is accomplished by appending attribute
        filters in the form `{scope}/{name}={value}` to the query string.

        Supported values for scope are:
          * __inventory__: Attributes reported by the device.
          * __system__: Attributes populated by the mender-server.
          * __identity__: Device's identity attributes provided in the device's auth request.
          * __monitor__: Attributes populated by the monitoring add-on.
          * __tags__: User-defined attributes associated with the device.

        Using an unsupported value for __scope__ will produce no results from this API except
        when no scope is present, in which case scope defaults to inventory.

        Examples:
        ```
        # Search for devices with inventory attribute `attr_name_1` and tag attribute `attr_name_2`
        GET /devices?inventory/attr_name_1=foo&tags/attr_name_2=100

        # Search devices by attribute without scope (inventory scope is used)
        GET /devices?attr_name_1=foo
        ```
      operationId: List Device Inventories
      parameters:
        - name: page
          in: query
          description: Starting page.
          schema:
            type: number
            format: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          schema:
            type: number
            format: integer
            default: 10
        - name: sort
          in: query
          description: |
            Sort devices by attribute.
            The parameter is formatted as a comma-separated list of attribute
            names and sort order.

            The order direction (`ord`) must be either `asc` or `desc` for
            ascending and descending respectively.
            Defaults to `desc` if not specified.

            For example: `?sort=attr1:asc,attr2:desc`
            will sort by 'attr1' ascending, and then by 'attr2' descending.
          schema:
            type: string
            format: attr[:ord][,attr[:ord]...]
        - name: has_group
          in: query
          description: Limit result to devices assigned to a group.
          schema:
            type: boolean
        - name: group
          in: query
          description: Limits result to devices in the given group.
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of devices found
              schema:
                type: string
            Link:
              description: |
                Standard page navigation header, supported relations: 'first', 'next', and 'prev'.
              schema:
                type: string
          content:
            application/json:
              schema:
                title: ListOfDevices
                type: array
                items:
                  $ref: '#/components/schemas/DeviceInventoryV1'
              example:
                - id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
                  attributes:
                    - name: ip_addr
                      scope: inventory
                      value: 1.2.3.4
                      description: IP address
                    - name: mac_addr
                      scope: inventory
                      value: 00.01:02:03:04:05
                      description: MAC address
                  updated_ts: '2016-10-03T16:58:51.639Z'
                - id: 76f40e5956c699e327489213df4459d1923e1a806603def19d417d004a4a3ef
                  attributes:
                    - name: mac
                      scope: inventory
                      value: '00:01:02:03:04:05'
                      description: MAC address
                  updated_ts: '2016-10-04T18:24:21.432Z'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/devices/{id}:
    get:
      tags:
        - Device_inventory_Management API
      summary: Get a selected device's inventory
      operationId: Get Device Inventory
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response - the device was found.
          headers:
            ETag:
              description: |
                Contains the device object's current ETag.
                Applicable only to attributes with 'tags' scope, changing other attributes doesn't affect the ETag.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceInventoryV1'
              example:
                id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
                attributes:
                  - name: ip_addr
                    scope: inventory
                    value: 1.2.3.4
                    description: IP address
                  - name: mac_addr
                    scope: inventory
                    value: 00.01:02:03:04:05
                    description: MAC address
                  - name: environment
                    scope: tags
                    value: test
                    description: Test environment
                    timestamp: '2016-10-19T17:23:01.639Z'
                updated_ts: '2016-10-03T16:58:51.639Z'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    delete:
      tags:
        - Device_inventory_Management API
      summary: Remove selected device's inventory
      operationId: Delete Device Inventory
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Device removed
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/devices/{id}/tags:
    put:
      tags:
        - Device_inventory_Management API
      summary: Replace the set of tags for a device
      description: |
        Replaces the tags associated to the device.

        This method replaces all the tags with the new set:
        * it removes from the db the attributes not provided
        * it overwrites the values of existing attributes
        * it creates attributes assigned for the first time
      operationId: Assign Tags
      parameters:
        - name: If-Match
          in: header
          description: Contains the device object's current ETag, and performs the update only if it matches the one stored in the database.
          schema:
            type: string
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: A list of tags descriptors.
        content:
          application/json:
            schema:
              title: ListOfTags
              type: array
              example:
                - name: location
                  value: germany
                  description: Germany region
                - name: environment
                  value: test
              items:
                $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Tags were updated successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: ETag doesn't match.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    patch:
      tags:
        - Device_inventory_Management API
      summary: Adds a set of tags for a device
      description: |
        Saves the provided tags set for the authenticated device.

        This method has upsert semantic:
        * it overwrites the values of existing attributes
        * it creates attributes assigned for the first time
      operationId: Add Tags
      parameters:
        - name: If-Match
          in: header
          description: Contains the device object's current ETag, and performs the update only if it matches the one stored in the database.
          schema:
            type: string
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: A list of tag descriptors.
        content:
          application/json:
            schema:
              title: ListOfTags
              type: array
              example:
                - name: location
                  value: germany
                  description: Germany region
                - name: environment
                  value: test
              items:
                $ref: '#/components/schemas/Tag'
        required: true
      responses:
        '200':
          description: Tags were updated successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '412':
          description: ETag doesn't match.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/devices/{id}/group:
    get:
      tags:
        - Device_inventory_Management API
      summary: Get a selected device's group
      operationId: Get Device Group
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: |
            Successful response. If the device is not assigned to any group, the 'group' field will be set to 'null'.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    put:
      tags:
        - Device_inventory_Management API
      summary: Add a device to a group
      description: |
        Adds a device to a group.

        Note that a given device can belong to at most one group.
        If a device already belongs to some group, it will be moved
        to the selected one.
      operationId: Assign Group
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Group descriptor.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        '204':
          description: Success - the device was added to the group.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/devices/{id}/group/{name}:
    delete:
      tags:
        - Device_inventory_Management API
      summary: Remove a device from a group
      description: |
        Removes the device with identifier 'id' from the group 'group'.
      operationId: Clear Group
      parameters:
        - name: id
          in: path
          description: Device identifier.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Group name.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The device was successfully removed from the group.
          content: {}
        '404':
          description: The device was not found or doesn't belong to the group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/groups:
    get:
      tags:
        - Device_inventory_Management API
      summary: List all groups existing device groups
      operationId: List Groups
      parameters:
        - name: status
          in: query
          description: Show groups for devices with the given auth set status.
          schema:
            type: string
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: array
                items:
                  title: ListOfGroupNames
                  type: string
                  description: Group name
              example:
                - staging
                - testing
                - production
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/groups/{name}:
    delete:
      tags:
        - Device_inventory_Management API
      summary: Remove a device group
      description: |
        Removes a device group. This API provides a bulk alternative to
        DELETE /devices/{id}/group/{name} for managing device groups.
      operationId: Remove a Group
      parameters:
        - name: name
          in: path
          description: Group name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - updated_count
                type: object
                properties:
                  updated_count:
                    type: number
                    description: |
                      Number of devices for which the group was cleared sucessfully.
                description: |
                  JSON object listing how many devices were updated.
              example:
                updated_count: 2
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/inventory/groups/{name}/devices:
    get:
      tags:
        - Device_inventory_Management API
      summary: List the devices belonging to a given group
      operationId: Get Devices in Group
      parameters:
        - name: page
          in: query
          description: Starting page.
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          schema:
            type: integer
            default: 10
        - name: name
          in: path
          description: Group name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          headers:
            X-Total-Count:
              description: Custom header indicating the total number of devices in the given group
              schema:
                type: string
            Link:
              description: Standard header, we support 'first', 'next', and 'prev'.
              schema:
                type: string
          content:
            application/json:
              schema:
                title: ListOfIDs
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    delete:
      tags:
        - Device_inventory_Management API
      summary: Clear devices' group
      description: |
        Removes a list of devices from the specified group.
      operationId: Remove Devices from Group
      parameters:
        - name: name
          in: path
          description: Group name.
          required: true
          schema:
            type: string
      requestBody:
        description: JSON list of device IDs to remove from the group.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - updated_count
                type: object
                properties:
                  updated_count:
                    type: number
                    description: |
                      Number of devices for which the group was cleared sucessfully.
                description: |
                  JSON object listing how many devices were updated.
              example:
                updated_count: 2
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    patch:
      tags:
        - Device_inventory_Management API
      summary: Add devices to group
      description: |
        Appends the list of devices in the request body to the given group.
        For devices already present in the group the operation has no effect.
      operationId: Add Devices to Group
      parameters:
        - name: name
          in: path
          description: Group name.
          required: true
          schema:
            type: string
      requestBody:
        description: JSON list of device IDs to append to the group.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                required:
                  - matched_count
                  - updated_count
                type: object
                properties:
                  updated_count:
                    type: number
                    description: |
                      Number of devices listed that changed group.
                  matched_count:
                    type: number
                    description: |
                      Number of devices listed that matched a valid device id internally.
                description: |
                  JSON object listing how many devices were updated.
              example:
                updated_count: 2
                matched_count: 3
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v2/inventory/filters/attributes:
    get:
      tags:
        - Device_inventory_filters_and_search_Management API
      summary: Get the list of filterable inventory attributes
      description: |
        Returns a list of filterable inventory attributes.

        The list is sorted in descending order by the count of occurrences of the
        attribute in the inventory database, then in ascending order by scope and name.

        Limitations:
         * The API considers up to a sample of 5,000 devices when aggregating the number of attributes.
         * The API returns up to 500 unique attributes.
      operationId: Get filterable attributes
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                title: List of filter attributes
                type: array
                items:
                  $ref: '#/components/schemas/FilterAttribute'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v2/inventory/filters/search:
    post:
      tags:
        - Device_inventory_filters_and_search_Management API
      summary: Search devices based on inventory attributes
      description: |
        Returns a paged collection of devices and their attributes.

        If multiple filter predicates are specified, the filters are
        combined using boolean `and` operator.
      operationId: Inventory V2 Search Device Inventories
      requestBody:
        description: The search and sort parameters of the filter
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: number
                  description: Starting page.
                  format: integer
                per_page:
                  type: number
                  description: Maximum number of results per page.
                  format: integer
                text:
                  type: string
                  description: Free-text search query
                filters:
                  type: array
                  description: List of filter predicates.
                  items:
                    $ref: '#/components/schemas/FilterPredicate'
                sort:
                  type: array
                  description: List of ordered sort criterias
                  items:
                    $ref: '#/components/schemas/SortCriteria'
                attributes:
                  type: array
                  description: List of attributes to select and return
                  items:
                    $ref: '#/components/schemas/SelectAttribute'
        required: false
      responses:
        '200':
          description: Successful response.
          headers:
            X-Total-Count:
              description: Total number of devices matched query.
              schema:
                type: string
            Link:
              description: |
                Standard header used for page navigation, page relations: 'first', 'next' and 'prev'.
              schema:
                type: string
          content:
            application/json:
              schema:
                title: ListOfDevices
                type: array
                items:
                  $ref: '#/components/schemas/DeviceInventory'
              example:
                - id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
                  attributes:
                    - name: ip_addr
                      scope: inventory
                      value: 1.2.3.4
                      description: IP address
                    - name: mac_addr
                      scope: inventory
                      value: 00.01:02:03:04:05
                      description: MAC address
                  updated_ts: '2016-10-03T16:58:51.639Z'
                - id: 76f40e5956c699e327489213df4459d1923e1a806603def19d417d004a4a3ef
                  attributes:
                    - name: mac
                      scope: inventory
                      value: '00:01:02:03:04:05'
                      description: MAC address
                  updated_ts: '2016-10-04T18:24:21.432Z'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/internal/v1/iot-manager/health:
    get:
      tags:
        - IoT_Manager_Internal API
      summary: Get health status of service
      operationId: IoTManager Internal Check Health
      responses:
        '204':
          description: Service is healthy.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/iot-manager/alive:
    get:
      tags:
        - IoT_Manager_Internal API
      summary: Get service liveliness status.
      operationId: IoTManager Internal Check Liveliness
      responses:
        '204':
          description: Service is up and serving requests.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/iot-manager/tenants/{tenantId}/devices:
    post:
      tags:
        - IoT_Manager_Internal API
      operationId: IoTManager Internal Provision device
      summary: Register a new device with the deviceconfig service.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewDevice'
        required: true
      responses:
        '202':
          description: The device provisioning event was accepted and will be processed asynchronously.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '409':
          description: A device with the same ID already exists in Iot Hub.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/iot-manager/tenants/{tenantId}:
    delete:
      tags:
        - IoT_Manager_Internal API
      operationId: IoTManager Internal Delete tenant
      summary: Delete all data belonging to a given tenant.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant to remove.
      responses:
        '204':
          description: The removal of tenant data was successful.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/iot-manager/tenants/{tenantId}/devices/{deviceId}:
    delete:
      tags:
        - IoT_Manager_Internal API
      operationId: IoTManager Internal Decommission device
      summary: Remove a device from Iot Hub.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: ID of the target device.
      responses:
        '202':
          description: The device decomissioning event was accepted and will be processed asynchronously.
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/iot-manager/tenants/{tenantId}/bulk/devices/status/{status}:
    put:
      operationId: IoTManager Internal Update device statuses
      tags:
        - IoT_Manager_Internal API
      summary: Update device statuses in bulk.
      parameters:
        - in: path
          name: tenantId
          schema:
            type: string
          required: true
          description: ID of tenant the device belongs to.
        - in: path
          name: status
          schema:
            type: string
            enum:
              - accepted
              - noauth
              - pending
              - preauthorized
              - rejected
          required: true
          description: The status of the device
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: List of devices to update. Up to 100 devices can be processed per request.
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Device ID.
                required:
                  - id
        required: true
      responses:
        '202':
          description: The device status update bulk event was accepted and will be processed asynchronously.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v1/iot-manager/integrations:
    get:
      operationId: IoTManager Management List integrations
      summary: List all configured integrations
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: page
          in: query
          description: Page number.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of results per page.
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: OK. Returns list of integrations.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Integration'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    post:
      operationId: IoTManager Management Register integration
      summary: Register a new cloud integration
      tags:
        - IoT_Manager_Management API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Integration'
        required: true
      responses:
        '201':
          description: Integration registered.
          headers:
            Location:
              description: URL of the newly registered integration.
              schema:
                type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/integrations/{id}:
    delete:
      operationId: IoTManager Management Remove integration
      summary: Remove a cloud integration
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: id
          in: path
          description: Integration identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Integration unregistered successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/integrations/{id}/credentials:
    put:
      operationId: IoTManager Management Set integration credentials
      summary: Replace the credentials associated with the integration.
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: id
          in: path
          description: Integration identifier.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '204':
          description: Credentials updated successfully.
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/devices/{deviceId}:
    delete:
      operationId: IoTManager Management Unregister device integrations
      summary: Removes all associated cloud integrations for the device.
      description: Removes all associated cloud integrations for the device, but does not clean up any external state.
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the device.
      responses:
        '204':
          description: OK. Device successfully unregistered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/devices/{deviceId}/state:
    get:
      operationId: IoTManager Management Get Device States
      summary: Gets the desired and reported state of a device
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the device.
      responses:
        '200':
          description: OK. Returns device reported and desired states for all integrations.
          content:
            application/json:
              schema:
                type: object
                description: Mapping from integration ID to DeviceState objects for all applicable integrations.
                additionalProperties:
                  $ref: '#/components/schemas/DeviceState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/devices/{deviceId}/state/{integrationId}:
    put:
      operationId: IoTManager Management Replace State
      summary: Replaces the (desired) cloud state of the device for the given integration
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the device.
        - name: integrationId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the integration.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceState'
        required: true
      responses:
        '200':
          description: OK. Returns the updated device state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceState'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    get:
      operationId: IoTManager Management Get Device State
      summary: Gets the desired and reported state of a device from an integration
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: deviceId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the device.
        - name: integrationId
          in: path
          schema:
            type: string
          required: true
          description: The unique ID of the integration.
      responses:
        '200':
          description: OK. Returns device reported and desired state for the integration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceState'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/iot-manager/events:
    get:
      operationId: IoTManager Management List events
      summary: List all stored events
      tags:
        - IoT_Manager_Management API
      parameters:
        - name: page
          in: query
          description: Page number.
          required: false
          schema:
            type: integer
            default: 1
        - name: per_page
          in: query
          description: Number of results per page.
          required: false
          schema:
            type: integer
            default: 20
        - name: integration_id
          in: query
          schema:
            type: string
            format: uuid
          required: false
          description: The unique ID of the integration to get the events from.
      responses:
        '200':
          description: OK. Returns list of events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/internal/v1/useradm/health:
    get:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Check the health of the service
      operationId: Useradm Check Health
      responses:
        '204':
          description: |
            Service is healthy and all dependencies are up and running.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          description: |
            Service unhealthy / not ready to accept traffic. At least one dependency is not running.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: 'error reaching MongoDB: context deadline exceeded'
                request_id: ffd712be-d697-4cb7-814b-88ff1e2eb5f6
  /api/internal/v1/useradm/alive:
    get:
      tags:
        - User_administration_and_authentication_Internal API
      summary: |
        Trivial endpoint that unconditionally returns an empty 200 response whenever the API handler is running correctly.
      operationId: Useradm Check Liveliness
      responses:
        '204':
          description: Service is up and running.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/useradm/auth/verify:
    post:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Check the validity of a token
      description: |
        Besides the basic validity check, checks the token expiration time and user-initiated token revocation.
        Services which intend to use it should be correctly set up in the gateway's configuration.
      operationId: Verify JWT
      parameters:
        - name: Authorization
          in: header
          description: The token in base64-encoded form.
          required: true
          schema:
            type: string
            format: Bearer [token]
        - name: X-Forwarded-Uri
          in: header
          description: |
            URI the original request was sent to, the URI is expected to have
            at least 4 components, eg. /api/management/1.0/foo/bar
          required: true
          schema:
            type: string
            format: HTTP path
        - name: X-Forwarded-Method
          in: header
          description: HTTP method used when accessing the original URI
          required: true
          schema:
            type: string
            enum:
              - GET
              - PUT
              - POST
              - DELETE
      responses:
        '200':
          description: The token is valid.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          description: Verification failed, authentication should not be granted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Token has expired - apply for a new one.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/useradm/tenants:
    post:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Create a tenant with provided configuration.
      operationId: Useradm Create Tenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantNew'
        required: true
      responses:
        '201':
          description: The tenant was created successfully.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/useradm/tenants/{tenant_id}/users:
    get:
      tags:
        - User_administration_and_authentication_Internal API
      summary: |
        List all users registered under the tenant owning the JWT.
      operationId: List Users Internal
      parameters:
        - name: tenant_id
          in: path
          description: Tenant ID.
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: |
            Limit result by user ID, can be repeated to include multiple users in the query.
          schema:
            type: string
        - name: email
          in: query
          description: |
            Limit result by user email, can be repeated to include multiple users in the query.
          schema:
            type: string
        - name: created_after
          in: query
          description: |
            Filter users created after timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: created_before
          in: query
          description: |
            Filter users created before timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: updated_after
          in: query
          description: |
            Filter users updated after timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: updated_before
          in: query
          description: |
            Filter users updated before timestamp (UNIX timestamp).
          schema:
            type: integer
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                title: ListOfUsers
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Create user
      operationId: Create User Internal
      parameters:
        - name: tenant_id
          in: path
          description: Tenant ID.
          required: true
          schema:
            type: string
      requestBody:
        description: New user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNewInternal'
        required: true
      responses:
        '201':
          description: The user was successfully created.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: |
            User name or ID is duplicated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/useradm/tenants/{tenant_id}/users/{user_id}:
    delete:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Delete a user
      description: |
        Remove a user from the tenant.
      operationId: Delete User Internal
      parameters:
        - name: tenant_id
          in: path
          description: Tenant ID.
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          description: User ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/internal/v1/useradm/tokens:
    delete:
      tags:
        - User_administration_and_authentication_Internal API
      summary: Delete all user tokens
      description: |
        This endpoint is designed to be used for tenant account suspension purpose.
        When only tenant_id parameter is set, tokens for all tenant users will be removed.
        It is also possible to remove tokens for user with given user_id by setting
        optional user_id parameter.
      operationId: Revoke User Tokens
      parameters:
        - name: tenant_id
          in: query
          description: Tenant ID.
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          description: User ID.
          schema:
            type: string
      responses:
        '204':
          description: Tokens deleted.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/management/v1/useradm/auth/login:
    post:
      tags:
        - User_Administration_Management API
      summary: Log in to Mender
      description: |
        Accepts user credentials via standard Basic Auth, and returns a
        JWT token to be used for authentication in subsequent requests.
      operationId: Login
      requestBody:
        description: Log in options
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginOptions'
        required: false
      responses:
        '200':
          description: |
            Authentication successful - a new JWT is issued and returned.
            The JWT is signed with the API's private key ('RS256' signing algorithm),
            and contains the following standard claims:
            * 'iss' - issuer
            * 'exp' - expiry date
            * 'sub' - unique, autogenerated user ID
            * 'scp' - 'mender.*', allows access to all APIs/methods
          content:
            application/jwt:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
        '400':
          description: Bad request, see error message for details.
          content:
            application/jwt:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized.
          content:
            application/jwt:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/jwt:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - Login: []
  /api/management/v1/useradm/auth/logout:
    post:
      tags:
        - User_Administration_Management API
      summary: Log out from Mender
      description: |
        Invalidates the JWT token of the current user.
      operationId: Logout
      responses:
        '202':
          description: |
            Request has been accepted and the JWT token has been invalidated.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/users:
    get:
      tags:
        - User_Administration_Management API
      summary: |
        List all users registered under the tenant owning the JWT.
      operationId: List Users Management
      parameters:
        - name: id
          in: query
          description: |
            Limit result by user ID, can be repeated to include multiple users in the query.
          schema:
            type: string
        - name: email
          in: query
          description: |
            Limit result by user email, can be repeated to include multiple users in the query.
          schema:
            type: string
        - name: created_after
          in: query
          description: |
            Filter users created after timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: created_before
          in: query
          description: |
            Filter users created before timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: updated_after
          in: query
          description: |
            Filter users updated after timestamp (UNIX timestamp).
          schema:
            type: integer
        - name: updated_before
          in: query
          description: |
            Filter users updated before timestamp (UNIX timestamp).
          schema:
            type: integer
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                title: ListOfUsers
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    post:
      tags:
        - User_Administration_Management API
      summary: |
        Create a new user under the tenant owning the JWT.
      operationId: Create User Management
      requestBody:
        description: New user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNew'
        required: true
      responses:
        '201':
          description: The user was successfully created.
          headers:
            Location:
              description: URI for the newly created 'User' resource.
              schema:
                type: string
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: |
            The email address is duplicated, password is too short or current password doesn't match.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/users/{id}:
    get:
      tags:
        - User_Administration_Management API
      summary: Get user information
      operationId: Show User
      parameters:
        - name: id
          in: path
          description: User id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response - a user information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    put:
      tags:
        - User_Administration_Management API
      summary: Update user information
      operationId: Update User
      parameters:
        - name: id
          in: path
          description: User id.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '204':
          description: User information updated.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: |
            The email address is duplicated, the password is too short
            or the user is trying to modify another user's password.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    delete:
      tags:
        - User_Administration_Management API
      summary: Remove user from the system
      operationId: Remove User
      parameters:
        - name: id
          in: path
          description: User id.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User removed.
          content: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/users/me:
    get:
      tags:
        - User_Administration_Management API
      summary: Get user information
      operationId: Show Own User Data
      responses:
        '200':
          description: Successful response - a user information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    put:
      tags:
        - User_Administration_Management API
      summary: Update own user information
      operationId: Update Own User Data
      requestBody:
        description: Updated user data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '204':
          description: User information updated.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: |
            The email address is duplicated or the password is too short.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/settings:
    get:
      tags:
        - User_Administration_Management API
      summary: Get global user settings
      operationId: Show User Settings
      responses:
        '200':
          description: Successful response - a user information is returned.
          headers:
            ETag:
              description: |
                Contains the device object's current ETag.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    post:
      tags:
        - User_Administration_Management API
      summary: Set global user settings
      description: |
        Create global user settings or replace existing settings with provided object.
      operationId: Update User Settings
      parameters:
        - name: If-Match
          in: header
          description: Contains the settings' current ETag, and performs the update only if it matches the one stored in the database.
          schema:
            type: string
      requestBody:
        description: New user settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        '201':
          description: User settings set.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '412':
          description: ETag doesn't match.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/settings/me:
    get:
      tags:
        - User_Administration_Management API
      summary: Get user settings for the current user
      operationId: Show My User Settings
      responses:
        '200':
          description: Successful response - a user information is returned.
          headers:
            ETag:
              description: |
                Contains the device object's current ETag.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    post:
      tags:
        - User_Administration_Management API
      summary: Set user settings for the current user
      description: |
        Create current user settings or replace existing settings with provided object.
      operationId: Update My User Settings
      parameters:
        - name: If-Match
          in: header
          description: Contains the settings' current ETag, and performs the update only if it matches the one stored in the database.
          schema:
            type: string
      requestBody:
        description: New user settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Settings'
        required: true
      responses:
        '201':
          description: User settings set.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '412':
          description: ETag doesn't match.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/settings/tokens:
    get:
      tags:
        - User_Administration_Management API
      summary: Get user Personal Access Tokens
      operationId: List User Personal Access Tokens
      responses:
        '200':
          description: Endpoint returns a list of tokens.
          content:
            application/json:
              schema:
                title: ListOfTokens
                type: array
                items:
                  $ref: '#/components/schemas/PersonalAccessToken'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
    post:
      tags:
        - User_Administration_Management API
      summary: Create new Personal Access Token
      description: |
        Create new Personal Access Token with given name and expiration.
      operationId: Create Personal Access Token
      requestBody:
        description: The token object.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessTokenRequest'
        required: true
      responses:
        '200':
          description: Token has been created.
          content:
            application/json:
              schema:
                type: string
                example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0NzYxMTkxMzYsImlzcyI6Ik1lbmRlciIsInN1YiI6Ijg1NGIzMTA5LTQ4NjItNGEyNS1hMWZiLWYxMTE2MWNlN2E4NCIsInNjcCI6WyJtZW5kZXIuKiJdfQ.X7Ief4PhPLlR6mA2wh3G3K0Z2tud0rK1QJesxu52NfICSeARmlujczs-_1YZxMwI0s-HgpXHbXIjaSVK80BjxjAM1rqpRGvgqSqG-dU5KmglDpAaTr4VaJci3VFPlVUVTRpI7bfqNMnKZtjmOUAGwjvroDUwX1RwayEmms-efGI
        '400':
          description: |
            The request body is malformed or expiration time is too big.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: |
            Personal Access Token with the same name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: |
            Maximum number of Personal Acess Tokens reached for this user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/settings/tokens/{id}:
    delete:
      tags:
        - User_Administration_Management API
      summary: Revoke Personal Access Token
      operationId: Revoke Personal Access Token
      parameters:
        - name: id
          in: path
          description: Token identifier.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Token removed.
          content: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/plans:
    get:
      tags:
        - User_Administration_Management API
      summary: Get list of available plans
      operationId: List Plans
      parameters:
        - name: page
          in: query
          description: Starting page.
          schema:
            type: number
            format: integer
            default: 1
        - name: per_page
          in: query
          description: Maximum number of results per page.
          schema:
            maximum: 500
            type: number
            format: integer
            default: 20
      responses:
        '200':
          description: Successful response - list of plans is returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plan'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /api/management/v1/useradm/plan_binding:
    get:
      tags:
        - User_Administration_Management API
      summary: Get plan and limits information for current tenant
      operationId: Show Plan And Limits
      responses:
        '200':
          description: Successful response - a plan information is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanBindingDetails'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ManagementJWT: []
  /status:
    get:
      summary: Check if service API is alive and serving requests
      operationId: Workflows Check Liveliness
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
              example:
                status: ok
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Workflows_other
  /health:
    get:
      summary: Check if service and all operational dependencies are healthy.
      operationId: Workflows Check Health
      responses:
        '204':
          description: Service is healthy.
          content: {}
        '500':
          $ref: '#/components/responses/InternalServerError'
        '502':
          description: Service is temporarily unavailable (currently unhealthy).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
        - Workflows_other
  /api/v1/workflow/{name}:
    post:
      summary: Start a new workflow
      description: |
        Starts a new workflow given by the name path-parameter.
      operationId: Start Workflow
      parameters:
        - name: name
          in: path
          description: Workflow identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Contains the definition of the job to be started.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/InputParameter'
        required: true
      responses:
        '201':
          description: Workflow created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Workflows_other
  /api/v1/workflow/{name}/batch:
    post:
      summary: Start a batch of workflows
      description: |
        Starts a new workflow given by the name path-parameter.
      operationId: Start Batch Workflows
      parameters:
        - name: name
          in: path
          description: Workflow identifier.
          required: true
          schema:
            type: string
      requestBody:
        description: Contains the definition of the job to be started.
        content:
          application/json:
            schema:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/InputParameter'
        required: true
      responses:
        '201':
          description: Workflows created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    error:
                      type: string
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Workflows_other
  /api/v1/workflow/{name}/{id}:
    get:
      summary: Gets the workflow status for the given id.
      description: |
        Gets the workflow status for the given workflow name and id provided
        by the path parameters.
      operationId: Workflow Status
      parameters:
        - name: name
          in: path
          description: Workflow identifier.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: Job identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Workflows_other
  /api/v1/metadata/workflows:
    get:
      summary: Get all workflow definitions
      operationId: List Workflows
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
      tags:
        - Workflows_other
    post:
      summary: Register a new workflow
      operationId: Register Workflow
      requestBody:
        description: Workflow definition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        required: true
      responses:
        '201':
          description: Successful response.
          content: {}
        '400':
          $ref: '#/components/responses/InvalidRequestError'
        '409':
          $ref: '#/components/responses/ConflictError'
      tags:
        - Workflows_other
  /api/v1/jobs/{id}:
    get:
      summary: Gets the job for the given id.
      description: |
        Gets the job object for the given job id.
      operationId: Job Structure
      parameters:
        - name: id
          in: path
          description: Job identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobObject'
        '404':
          $ref: '#/components/responses/NotFound'
      tags:
        - Workflows_other
components:
  responses:
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidRequestError:
      description: Invalid Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ConflictError:
      description: Conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: The user is not permitted to access the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Forbidden
            request_id: eed14d55-d996-42cd-8248-e806663810a8
  schemas:
    Error:
      description: Error descriptor.
      example:
        error: error message
        request_id: f7881e82-0492-49fb-b459-795654e7188a
      properties:
        error:
          description: Description of the error.
          type: string
        request_id:
          description: Request ID (same as in X-MEN-RequestID header).
          type: string
      required:
        - error
      type: object
    NewTenant:
      type: object
      properties:
        tenant_id:
          type: string
          description: ID of new tenant.
      required:
        - tenant_id
    AuthSet:
      type: object
      properties:
        id:
          type: string
          description: The unique ID of the authentication set.
        device_id:
          type: string
          description: The unique ID of the device the authentication set belongs.
        identity_data:
          type: object
          description: The device's identity data.
          additionalProperties: true
        pubkey:
          type: string
          description: PEM-encoded public key of the device authentication set.
        status:
          type: string
          description: Authorization status of the set.
        ts:
          type: string
          format: date-time
          description: The creation timestamp of the authentication set.
    ProvisionDevice:
      type: object
      properties:
        device_id:
          type: string
          format: uuid
          description: ID of the new device.
      required:
        - device_id
    Scope:
      type: string
      description: |
        The scope of the attribute.

        Scope is a string and acts as namespace for the attribute name.

        * __inventory__: Attributes reported by the device.
        * __system__: Attributes populated by the mender-server.
        * __identity__: Device's identity attributes provided in the device's auth request.
        * __monitor__: Attributes populated by the monitoring add-on.
        * __tags__: User-defined attributes associated with the device.
      enum:
        - system
        - identity
        - inventory
        - monitor
        - tags
    DeploymentStatus:
      example:
        status: success
      properties:
        status:
          enum:
            - installing
            - pause_before_installing
            - downloading
            - pause_before_rebooting
            - rebooting
            - pause_before_committing
            - success
            - failure
            - already-installed
          type: string
        substate:
          description: Additional state information
          type: string
      required:
        - status
      type: object
    DeploymentInstructions:
      example:
        id: w81s4fae-7dec-11d0-a765-00a0c91e6bf6
        artifact:
          artifact_name: my-app-0.1
          source:
            uri: https://aws.myupdatebucket.com/image123
            expire: '2016-03-11T13:03:17.063493443Z'
          device_types_compatible:
            - rspi
            - rspi2
            - rspi0
      properties:
        id:
          description: Deployment ID
          type: string
        artifact:
          $ref: '#/components/schemas/DeploymentInstructionsArtifact'
      required:
        - artifact
        - id
      type: object
      nullable: true
    DeploymentLog:
      example:
        messages:
          - timestamp: '2016-03-11T13:03:17.063493443Z'
            level: INFO
            message: OK
          - timestamp: '2016-03-11T13:03:18.023765782Z'
            level: DEBUG
            message: successfully updated.
      properties:
        messages:
          description: Array of log entries of a deployment
          items:
            $ref: '#/components/schemas/DeploymentLogMessagesInner'
          type: array
      required:
        - messages
      type: object
    DeploymentInstructionsArtifactSource:
      properties:
        uri:
          description: URL to fetch the artifact from
          format: url
          type: string
        expire:
          description: URL expiration time
          format: date-time
          type: string
      type: object
    DeploymentInstructionsArtifact:
      properties:
        id:
          type: string
        source:
          $ref: '#/components/schemas/DeploymentInstructionsArtifactSource'
        device_types_compatible:
          description: Compatible device types
          items:
            type: string
          type: array
        artifact_name:
          type: string
      required:
        - artifact_name
        - device_types_compatible
        - source
      type: object
    DeploymentLogMessagesInner:
      properties:
        timestamp:
          format: date-time
          type: string
        level:
          type: string
        message:
          type: string
      required:
        - level
        - message
        - timestamp
      type: object
    StorageSettings:
      description: Per tenant storage settings.
      example:
        region: us-east-1
        bucket: mender-artifacts-unique-bucket-name
        uri: example.internal:9000
        external_uri: example.com
        key: <key>
        secret: <secret>
        token: <token>
        force_path_style: false
        use_accelerate: false
      properties:
        type:
          description: The storage provider type 'azure' Blob storage or AWS 's3' (defaults to s3).
          enum:
            - s3
            - azure
          type: string
        region:
          description: 'AWS region (S3 only: required).'
          type: string
        bucket:
          description: 'S3 Bucket (Azure: container) name.'
          type: string
        uri:
          description: Bucket/container endpoint URI.
          type: string
        external_uri:
          description: Public Endpoint URI for presigning URLs (S3 only).
          type: string
        key:
          description: 'Access key identifier (Azure: account name).'
          type: string
        secret:
          description: 'Secret access key (Azure: access key).'
          type: string
        token:
          description: AWS S3 session token (S3 only).
          type: string
        force_path_style:
          description: Force S3 path-style instead of virtual-hosted style (S3 only).
          type: boolean
        use_accelerate:
          description: Enable S3 Transfer acceleration (S3 only).
          type: boolean
        connection_string:
          description: Shared access key connection string (Azure only).
          type: string
        container_name:
          description: Alias for 'bucket' (Azure only).
          type: string
        account_name:
          description: Alias for 'key' (Azure only).
          type: string
        account_key:
          description: Alias for 'secret' (Azure only).
          type: string
      required:
        - bucket
        - key
        - secret
      type: object
    StorageUsage:
      description: Tenant account storage limit and storage usage.
      example:
        limit: 1073741824
        usage: 536870912
      properties:
        limit:
          description: |
            Storage limit in bytes. If set to 0 - there is no limit for storage.
          type: integer
        usage:
          description: |
            Current storage usage in bytes.
          type: integer
      required:
        - limit
        - usage
      type: object
    DeploymentV1Internal:
      example:
        created: '2016-02-11 13:03:17.063493+00:00'
        status: finished
        name: production
        artifact_name: Application 0.0.1
        id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
        finished: '2016-03-11 13:03:17.063493+00:00'
      properties:
        created:
          format: date-time
          type: string
        name:
          type: string
        artifact_name:
          type: string
        id:
          type: string
        finished:
          format: date-time
          type: string
        status:
          enum:
            - inprogress
            - pending
            - finished
          type: string
        device_count:
          type: integer
        artifacts:
          description: An array of artifact's identifiers.
          items:
            type: string
          type: array
        type:
          enum:
            - configuration
            - software
          type: string
      required:
        - artifact_name
        - created
        - id
        - name
        - status
      type: object
    ConfigurationDeploymentRequest:
      example:
        name: config-1.1
        configuration: '{"foo":"bar"}'
      properties:
        name:
          description: Name of the deployment
          type: string
        configuration:
          description: |
            A string containing a configuration object.
            The deployments service will use it to generate configuration
            artifact for the device.
            The artifact will be generated when the device will ask
            for an update.
          type: string
      required:
        - configuration
        - name
      type: object
    DeviceDeployment:
      example:
        id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
        deployment:
          id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
          name: production
          artifact_name: Application 0.0.1
          status: inprogress
          created: '2016-02-11 13:03:17.063493+00:00'
          device_count: 100
        device:
          id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
          device_type: Raspberry Pi 3
          status: installing
          finished: '2016-03-11 13:03:17.063493+00:00'
          created: '2016-02-11 13:03:17.063493+00:00'
          state: installing
          substate: installing.enter;script:foo-bar
          log: false
          image:
            id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            meta:
              description: Johns Monday test build
            meta_artifact:
              name: Application 1.0.0
              device_types_compatible:
                - Beagle Bone
              info:
                format: mender
                version: 3
              updates:
                - type_info:
                    type: rootfs-image
                  files:
                    - name: rootfs-image-1
                      checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                      size: 123
                      date: 2016-03-11T13:03:17.063+0000
                  metadata: {}
                  meta_data: []
              artifact_provides:
                artifact_name: test
                rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                rootfs-image.version: test
              artifact_depends:
                device_type:
                  - test
              clears_artifact_provides:
                - rootfs-image.*
            size: 36891648
            modified: '2016-03-11 13:03:17.063493+00:00'
      properties:
        id:
          type: string
        deployment:
          $ref: '#/components/schemas/DeploymentV1Internal'
        device:
          $ref: '#/components/schemas/DeviceWithImage'
      required:
        - deployment
        - device
      type: object
    LastDeviceDeploymentsStatuses:
      example:
        device_deployment_last_statuses:
          - device_id: b86dfe3d-a0a6-4838-b374-5fbcb7c956a1
            deployment_id: acaf62f0-6a6f-45e4-9c52-838ee593cb62
            device_deployment_id: b14a36d3-c1a9-408c-b128-bfb4808604f1
            device_deployment_status: success
          - device_id: b86dfe3d-a0a6-4838-b374-5fbcb7c956a1
            deployment_id: acaf62f0-6a6f-45e4-9c52-838ee593cb62
            device_deployment_id: b14a36d3-c1a9-408c-b128-bfb4808604f1
            device_deployment_status: success
      properties:
        device_deployment_last_statuses:
          items:
            $ref: '#/components/schemas/LastDeviceDeployment'
          type: array
      required:
        - device_deployment_last_statuses
      type: object
    LastDeviceDeployment:
      example:
        device_id: b86dfe3d-a0a6-4838-b374-5fbcb7c956a1
        deployment_id: acaf62f0-6a6f-45e4-9c52-838ee593cb62
        device_deployment_id: b14a36d3-c1a9-408c-b128-bfb4808604f1
        device_deployment_status: success
      properties:
        device_id:
          type: string
        deployment_id:
          type: string
        device_deployment_id:
          type: string
        device_deployment_status:
          type: string
      type: object
    LastDeviceDeploymentReq:
      example:
        device_ids:
          - device_id1
          - device_id2
      properties:
        device_ids:
          items:
            type: string
          type: array
      required:
        - device_ids
      type: object
    Upload_artifact_request:
      properties:
        artifact_id:
          description: Artifact ID, optional; the server generates a randome one if not provided.
          type: string
        size:
          description: Size of the artifact file in bytes.
          format: long
          type: integer
        description:
          type: string
        artifact:
          description: Artifact. It has to be the last part of request.
          format: binary
          type: string
      required:
        - artifact
      type: object
    StorageLimit:
      description: Tenant account storage limit and storage usage.
      example:
        limit: 1073741824
        usage: 536870912
      properties:
        limit:
          description: |
            Storage limit in bytes. If set to 0 - there is no limit for storage.
          type: integer
        usage:
          description: |
            Current storage usage in bytes.
          type: integer
      required:
        - limit
        - usage
      type: object
    DeviceStatus:
      enum:
        - failure
        - aborted
        - pause_before_installing
        - pause_before_committing
        - pause_before_rebooting
        - downloading
        - installing
        - rebooting
        - pending
        - success
        - noartifact
        - already-installed
        - decommissioned
      type: string
    DeviceWithImageImageMeta:
      properties:
        description:
          description: Image description
          type: string
      type: object
    ArtifactInfo:
      description: Information about artifact format and version.
      properties:
        format:
          type: string
        version:
          type: integer
      type: object
    ArtifactTypeInfo:
      description: |
        Information about update type.
      properties:
        type:
          description: Note that for emtpy Artifacts, the type is 'null'
          type: string
      type: object
    UpdateFile:
      description: |
        Information about particular update file.
      properties:
        name:
          type: string
        checksum:
          type: string
        size:
          type: integer
        date:
          format: date-time
          type: string
      type: object
    MetadataAny:
      description: metadata is an object of unknown structure as this is dependent of update type (also custom defined by user)
      additionalProperties:
        type: string
      type: object
    MetadataAnyDeprecated:
      deprecated: true
      description: |
        Deprecated: Please use `metadata` instead.
        A list of objects of unknown structure as this is dependent
        of update type (also custom defined by user)
      items:
        type: object
      type: array
    Update:
      description: |
        Single updated to be applied.
      example:
        type_info:
          type: type
        metadata: {}
        meta_data: []
        files:
          - date: '2000-01-23T04:56:07.000+00:00'
            size: 6
            name: name
            checksum: checksum
          - date: '2000-01-23T04:56:07.000+00:00'
            size: 6
            name: name
            checksum: checksum
      properties:
        type_info:
          $ref: '#/components/schemas/ArtifactTypeInfo'
        files:
          items:
            $ref: '#/components/schemas/UpdateFile'
          type: array
        metadata:
          $ref: '#/components/schemas/MetadataAny'
        meta_data:
          $ref: '#/components/schemas/MetadataAnyDeprecated'
      type: object
    DeviceWithImageImageMetaArtifact:
      properties:
        name:
          type: string
        device_types_compatible:
          description: An array of compatible device types.
          items:
            type: string
          type: array
        info:
          $ref: '#/components/schemas/ArtifactInfo'
        signed:
          description: Idicates if artifact is signed or not.
          type: boolean
        updates:
          items:
            $ref: '#/components/schemas/Update'
          type: array
        artifact_provides:
          additionalProperties:
            type: string
          description: |
            List of Artifact provides.

            Map of key/value pairs, where both keys and values are strings.
          type: object
        artifact_depends:
          additionalProperties:
            items:
              type: string
            type: array
          description: |
            List of Artifact depends.

            Map of key/value pairs, where keys are strings and values are lists of strings.
          type: object
        clears_artifact_provides:
          description: List of Clear Artifact provides.
          items:
            type: string
          type: array
      type: object
    DeviceWithImageImage:
      properties:
        id:
          description: Image ID
          type: string
        meta:
          $ref: '#/components/schemas/DeviceWithImageImageMeta'
        meta_artifact:
          $ref: '#/components/schemas/DeviceWithImageImageMetaArtifact'
        size:
          description: Image size in bytes
          type: integer
        modified:
          description: Creation / last edition of any of the artifact properties
          format: date-time
          type: string
      type: object
    DeviceWithImage:
      example:
        id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
        finished: '2016-03-11T13:03:17.063493443Z'
        status: installing
        created: '2016-02-11T13:03:17.063493443Z'
        started: '2016-02-12T13:03:17.063493443Z'
        device_type: Raspberry Pi 3
        log: false
        state: installing
        substate: installing.enter;script:foo-bar
        image:
          id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
          name: Application 1.0.0
          meta:
            description: Johns Monday test build
          meta_artifact:
            name: Application 1.0.0
            device_types_compatible:
              - Beagle Bone
            info:
              format: mender
              version: 3
            updates:
              - type_info:
                  type: rootfs-image
                files:
                  - name: rootfs-image-1
                    checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                    size: 123
                    date: 2016-03-11T13:03:17.063+0000
                meta_data: []
                metadata: {}
            artifact_provides:
              artifact_name: test
              rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
              rootfs-image.version: test
            artifact_depends:
              device_type:
                - test
            clears_artifact_provides:
              - rootfs-image.*
          size: 36891648
          modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        id:
          description: Device identifier.
          type: string
        status:
          $ref: '#/components/schemas/DeviceStatus'
        created:
          format: date-time
          type: string
        started:
          format: date-time
          type: string
        finished:
          format: date-time
          type: string
        deleted:
          format: date-time
          type: string
        device_type:
          type: string
        log:
          description: Availability of the device's deployment log.
          type: boolean
        state:
          description: State reported by device
          type: string
        substate:
          description: Additional state information
          type: string
        image:
          $ref: '#/components/schemas/DeviceWithImageImage'
      required:
        - id
        - log
        - status
      type: object
    ErrorExt:
      description: Error descriptor with additional metadata.
      example:
        error: error description
        request_id: 11de4197-d8cf-4bd2-8a3a-29f88f238e7b
        metadata:
          additional: properties
      properties:
        error:
          description: Description of the error.
          type: string
        request_id:
          description: Request ID (same as in X-MEN-RequestID header).
          type: string
        metadata:
          additionalProperties: true
          type: object
      required:
        - error
      type: object
    NewDeployment:
      example:
        name: production
        artifact_name: Application 0.0.1
        devices:
          - 00a0c91e6-7dec-11d0-a765-f81d4faebf6
      properties:
        name:
          description: Name of the deployment
          type: string
        artifact_name:
          description: Name of the artifact to deploy
          type: string
        devices:
          description: An array of devices' identifiers.
          items:
            type: string
          type: array
        all_devices:
          description: |
            When set, the deployment will be created for all
            currently accepted devices.
          type: boolean
        force_installation:
          description: Force the installation of the Artifact disabling the `already-installed` check.
          type: boolean
      required:
        - artifact_name
        - name
      type: object
    NewDeploymentForGroup:
      example:
        name: production
        artifact_name: Application 0.0.1
      properties:
        name:
          description: Name of the deployment
          type: string
        artifact_name:
          description: Name of the artifact to deploy
          type: string
        force_installation:
          description: Force the installation of the Artifact disabling the `already-installed` check.
          type: boolean
      required:
        - artifact_name
        - name
      type: object
    DeploymentV1:
      example:
        created: '2016-02-11T13:03:17.063493443Z'
        status: finished
        name: production
        artifact_name: Application 0.0.1
        id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
        finished: '2016-03-11T13:03:17.063493443Z'
        device_count: 100
      properties:
        id:
          description: Deployment identifier
          type: string
        name:
          description: Name of the deployment
          type: string
        artifact_name:
          description: Name of the artifact to deploy
          type: string
        created:
          description: Deployment's creation date and time
          format: date-time
          type: string
        finished:
          description: Deployment's completion date and time
          format: date-time
          type: string
        status:
          description: Status of the deployment
          enum:
            - inprogress
            - pending
            - finished
          type: string
        device_count:
          description: Number of devices the deployment acted upon
          type: integer
        artifacts:
          description: An array of artifact's identifiers.
          items:
            type: string
          type: array
        groups:
          description: |
            An array of groups the devices targeted by the deployment belong to.
            Available only if the user created the deployment for a group or a single device (if the device was in a static group).
          items:
            type: string
          type: array
        type:
          enum:
            - configuration
            - software
          type: string
        configuration:
          description: |
            A string containing a configuration object provided
            with the deployment constructor.
          type: string
        statistics:
          $ref: '#/components/schemas/DeploymentStatistics'
        filter:
          $ref: '#/components/schemas/FilterV1'
      required:
        - artifact_name
        - created
        - device_count
        - id
        - name
        - status
      type: object
    DeviceDeploymentV1:
      example:
        id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
        deployment:
          id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
          name: production
          artifact_name: Application 0.0.1
          status: inprogress
          created: '2016-02-11T13:03:17.063493443Z'
          device_count: 100
        device:
          id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
          device_type: Raspberry Pi 3
          status: installing
          finished: '2016-03-11T13:03:17.063493443Z'
          created: '2016-02-11T13:03:17.063493443Z'
          started: '2016-02-11T13:03:17.063493443Z'
          state: installing
          substate: installing.enter;script:foo-bar
          log: false
          image:
            id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            meta:
              description: Johns Monday test build
            meta_artifact:
              name: Application 1.0.0
              device_types_compatible:
                - Beagle Bone
              info:
                format: mender
                version: 3
              updates:
                - type_info:
                    type: rootfs-image
                  files:
                    - name: rootfs-image-1
                      checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                      size: 123
                      date: 2016-03-11T13:03:17.063+0000
                  metadata: {}
                  meta_data: []
              artifact_provides:
                artifact_name: test
                rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
                rootfs-image.version: test
              artifact_depends:
                device_type:
                  - test
              clears_artifact_provides:
                - rootfs-image.*
            size: 36891648
            modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        id:
          type: string
        deployment:
          $ref: '#/components/schemas/DeploymentV1'
        device:
          $ref: '#/components/schemas/DeviceWithImage'
      required:
        - deployment
        - device
      type: object
    ArtifactUpdateV1:
      description: Artifact information update.
      example:
        description: Some description
      properties:
        description:
          type: string
      type: object
    ArtifactV1:
      description: Detailed artifact.
      example:
        id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
        name: Application 1.0.0
        description: Johns Monday test build
        device_types_compatible:
          - Beagle Bone
        info:
          format: mender
          version: 3
        updates:
          - type_info:
              type: rootfs-image
            files:
              - name: rootfs-image-1
                checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                size: 123
                date: 2016-03-11T13:03:17.063+0000
            metadata: {}
            meta_data: []
        artifact_provides:
          artifact_name: test
          rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
          rootfs-image.version: test
        artifact_depends:
          device_type:
            - test
        clears_artifact_provides:
          - rootfs-image.*
        size: 36891648
        modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        device_types_compatible:
          description: An array of compatible device types.
          items:
            type: string
          type: array
        info:
          $ref: '#/components/schemas/ArtifactInfo'
        signed:
          description: Idicates if artifact is signed or not.
          type: boolean
        updates:
          items:
            $ref: '#/components/schemas/Update'
          type: array
        artifact_provides:
          additionalProperties:
            type: string
          description: |
            List of Artifact provides.

            Map of key/value pairs, where both keys and values are strings.
          type: object
        artifact_depends:
          additionalProperties:
            items:
              type: string
            type: array
          description: |
            List of Artifact depends.

            Map of key/value pairs, where keys are strings and values are lists of strings.
          type: object
        clears_artifact_provides:
          description: List of Clear Artifact provides.
          items:
            type: string
          type: array
        size:
          description: |
            Artifact total size in bytes - the size of the actual file that will be transferred to the device (compressed).
          type: integer
        modified:
          description: |
            Represents creation / last edition of any of the artifact properties.
          format: date-time
          type: string
      required:
        - device_types_compatible
        - id
        - modified
        - name
      type: object
    ArtifactLink:
      description: URL for artifact file download.
      example:
        uri: http://mender.io/artifact.tar.gz.mender
        expire: '2016-10-29T10:45:34Z'
      properties:
        uri:
          type: string
        expire:
          format: date-time
          type: string
      required:
        - expire
        - uri
      type: object
    ArtifactUploadLink:
      description: URL for artifact file upload.
      example:
        id: 07d2e773-a2a3-4f64-936a-4245e79194dd
        uri: https://hosted-mender-artifacts.s3.amazonaws.com/1234/40df67c4-e5e9-4042-981a-f43adebd5b88?X-Amz-Date=20230401T000000Z&X-Amz-Expires=900&X-Amz-Signature=6d656e646572
        expire: '2023-04-01T00:15:00Z'
      properties:
        id:
          description: The ID of the artifact upload intent.
          format: uuid
          type: string
        uri:
          type: string
        expire:
          format: date-time
          type: string
      required:
        - expire
        - id
        - uri
      type: object
    ReleasesV1:
      description: List of releases
      items:
        $ref: '#/components/schemas/ReleaseV1'
      type: array
    ReleaseV1:
      description: Groups artifacts with the same release name into a single resource.
      example:
        name: my-app-v1.0.1
        artifacts:
          - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            description: Johns Monday test build
            device_types_compatible:
              - Beagle Bone
            info:
              format: mender
              version: 3
            updates:
              - type_info:
                  type: rootfs-image
                files:
                  - name: rootfs-image-1
                    checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                    size: 123
                    date: 2016-03-11T13:03:17.063+0000
                metadata: {}
                meta_data: []
            artifact_provides:
              artifact_name: test
              rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
              rootfs-image.version: test
            artifact_depends:
              device_type:
                - test
            clears_artifact_provides:
              - rootfs-image.*
            size: 36891648
            modified: '2016-03-11T13:03:17.063493443Z'
          - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            description: Johns Monday test build
            device_types_compatible:
              - Raspberry Pi
            info:
              format: mender
              version: 3
            updates:
              - type_info:
                  type: rootfs-image
                files:
                  - name: rootfs-image-1
                    checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                    size: 123
                    date: 2016-03-11T13:03:17.063+0000
                metadata: {}
                meta_data: []
            artifact_provides:
              artifact_name: test
              rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
              rootfs-image.version: test
            artifact_depends:
              device_type:
                - test
            clears_artifact_provides:
              - rootfs-image.*
            size: 36891648
            modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        Name:
          description: |
            release name.
          type: string
        modified:
          description: |
            Last modification time for the release.
          format: date-time
          type: string
        Artifacts:
          description: List of artifacts for this release.
          items:
            $ref: '#/components/schemas/ArtifactV1'
          type: array
        ArtifactsCount:
          description: Number of artifacts.
          type: integer
        tags:
          description: |-
            Tags assigned to the release used for filtering releases. Each tag
            must be valid a ASCII string and contain only lowercase and uppercase
            letters, digits, underscores, periods and hyphens.
          items:
            type: string
          type: array
        notes:
          description: |
            Additional information describing a Release limited to 1024 characters. Please use the v2 API to set this field.
          type: string
      type: object
    DirectUploadMetadata:
      description: Artifact metadata
      example:
        size: 0
        updates:
          - type_info:
              type: type
            metadata: {}
            meta_data: []
            files:
              - date: '2000-01-23T04:56:07.000+00:00'
                size: 6
                name: name
                checksum: checksum
              - date: '2000-01-23T04:56:07.000+00:00'
                size: 6
                name: name
                checksum: checksum
          - type_info:
              type: type
            metadata: {}
            meta_data: []
            files:
              - date: '2000-01-23T04:56:07.000+00:00'
                size: 6
                name: name
                checksum: checksum
              - date: '2000-01-23T04:56:07.000+00:00'
                size: 6
                name: name
                checksum: checksum
      properties:
        size:
          description: |
            wsize of the artifact file.
          type: integer
        updates:
          description: List of updates for this artifact.
          items:
            $ref: '#/components/schemas/Update'
          type: array
      type: object
    DeploymentIdentifier:
      description: Deployment identifier
      example:
        deployment_ids:
          - deployment_ids
          - deployment_ids
      properties:
        deployment_ids:
          items:
            description: The list of deployment IDs
            type: string
          type: array
      type: object
    FilterV1:
      description: |
        Filter built based on devices targeted by the deployment.
      example:
        terms:
          - scope: system
            attribute: group
            type: $eq
            value: groupName
      properties:
        terms:
          items:
            $ref: '#/components/schemas/AttributeFilterPredicate'
          type: array
      required:
        - terms
      type: object
    DeploymentStatusStatisticsList200ResponseInner:
      example:
        stats:
          success: 3
          pending: 1
          failure: 0
          downloading: 1
          installing: 2
          rebooting: 3
          noartifact: 0
          already-installed: 0
          aborted: 0
          pause_before_installing: 0
          pause_before_rebooting: 0
          pause_before_committing: 0
        id: id
      properties:
        id:
          description: The deployment ID
          type: string
        stats:
          $ref: '#/components/schemas/Statistics'
      type: object
    AbortDeploymentRequest:
      properties:
        status:
          enum:
            - aborted
          type: string
      required:
        - status
      type: object
    UploadArtifactRequest:
      properties:
        size:
          description: |
            Size of the artifact file in bytes.
            DEPRECATED: _since Mon Apr 6 2020_ Size is determined from uploaded content.
          format: long
          type: integer
        description:
          type: string
        artifact:
          description: Artifact. It has to be the last part of request.
          format: binary
          type: string
      required:
        - artifact
      type: object
    CompleteDirectUpload404Response:
      example:
        error: error
        request_id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        error:
          type: string
        request_id:
          description: 'Request identifier (Header: X-Men-Requestid)'
          format: uuid
          type: string
      type: object
    GenerateArtifactRequest:
      properties:
        name:
          description: Name of the artifact to generate.
          type: string
        description:
          description: Description of the artifact to generate.
          type: string
        device_types_compatible:
          description: An array of compatible device types.
          items:
            type: string
          type: array
        type:
          description: Update Module used to generate the artifact.
          enum:
            - single_file
          type: string
        args:
          description: |
            String that represents a JSON document defining the arguments used to generate the artifact.
            The service won't parse the content of this parameter and pass it as it is to the create artifact worker.
            The available arguments and options depend on the Update Module implementation and are, therefore, Type-specific.
          type: string
        file:
          description: Raw file to be used to generate the artifact. It has to be the last part of request.
          format: binary
          type: string
      required:
        - device_types_compatible
        - file
        - name
        - type
      type: object
    Statistics:
      example:
        success: 3
        pending: 1
        failure: 0
        downloading: 1
        installing: 2
        rebooting: 3
        noartifact: 0
        already-installed: 0
        aborted: 0
        pause_before_installing: 0
        pause_before_rebooting: 0
        pause_before_committing: 0
      properties:
        success:
          description: Number of successful deployments.
          type: integer
        pending:
          description: Number of pending deployments.
          type: integer
        downloading:
          description: Number of deployments being downloaded.
          type: integer
        rebooting:
          description: Number of deployments devices are rebooting into.
          type: integer
        installing:
          description: Number of deployments devices being installed.
          type: integer
        failure:
          description: Number of failed deployments.
          type: integer
        noartifact:
          description: Do not have appropriate artifact for device type.
          type: integer
        already-installed:
          description: Number of devices unaffected by upgrade, since they are already running the specified software version.
          type: integer
        aborted:
          description: Number of deployments aborted by user.
          type: integer
        pause_before_installing:
          description: Number of deployments paused before install state.
          type: integer
        pause_before_rebooting:
          description: Number of deployments paused before reboot phase.
          type: integer
        pause_before_committing:
          description: Number of deployments paused before commit phase.
          type: integer
      required:
        - aborted
        - already-installed
        - downloading
        - failure
        - installing
        - noartifact
        - pause_before_committing
        - pause_before_installing
        - pause_before_rebooting
        - pending
        - rebooting
        - success
      type: object
    DeploymentStatistics:
      properties:
        status:
          $ref: '#/components/schemas/Statistics'
        total_size:
          description: |
            Sum of sizes (in bytes) of all artifacts assigned to all device deployments,
            which are part of this deployment.
            If the same artifact is assigned to multiple device deployments,
            its size will be counted multiple times.
          type: integer
      type: object
    AttributeFilterPredicate:
      description: Attribute filter predicate
      example:
        type: $eq
        attribute: serial_no
        scope: inventory
        value: '123456789'
      properties:
        scope:
          $ref: '#/components/schemas/Scope'
        attribute:
          description: |
            Name of the attribute to be queried for filtering.
          type: string
        type:
          description: Type or operator of the filter predicate.
          enum:
            - $eq
            - $gt
            - $gte
            - $in
            - $lt
            - $lte
            - $ne
            - $nin
            - $exists
          type: string
        value:
          description: |
            The value of the attribute to be used in filtering.
            Attribute type is implicit, inferred from the JSON type.
            Supported types: number, string, array of numbers, array of strings.
            Mixed arrays are not allowed.
          type: string
      required:
        - attribute
        - scope
        - type
        - value
      type: object
    ArtifactV2:
      description: Detailed artifact.
      example:
        id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
        name: Application 1.0.0
        description: Johns Monday test build
        device_types_compatible:
          - Beagle Bone
        info:
          format: mender
          version: 3
        updates:
          - type_info:
              type: rootfs-image
            files:
              - name: rootfs-image-1
                checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                size: 123
                date: 2016-03-11T13:03:17.063+0000
            metadata: {}
            meta_data: []
        artifact_provides:
          artifact_name: test
          rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
          rootfs-image.version: test
        artifact_depends:
          device_type:
            - test
        clears_artifact_provides:
          - rootfs-image.*
        size: 36891648
        modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        device_types_compatible:
          description: An array of compatible device types.
          items:
            type: string
          type: array
        info:
          $ref: '#/components/schemas/ArtifactInfo'
        signed:
          description: Idicates if artifact is signed or not.
          type: boolean
        updates:
          items:
            $ref: '#/components/schemas/Update'
          type: array
        artifact_provides:
          additionalProperties:
            type: string
          description: |
            List of Artifact provides.

            Map of key/value pairs, where both keys and values are strings.
          type: object
        artifact_depends:
          additionalProperties:
            items:
              type: string
            type: array
          description: |
            List of Artifact depends.

            Map of key/value pairs, where keys are strings and values are lists of strings.
          type: object
        clears_artifact_provides:
          description: List of Clear Artifact provides.
          items:
            type: string
          type: array
        size:
          description: |
            Artifact total size in bytes - the size of the actual file that will be transferred to the device (compressed).
          type: integer
        modified:
          description: |
            Represents creation / last edition of any of the artifact properties.
          format: date-time
          type: string
      required:
        - description
        - device_types_compatible
        - id
        - modified
        - name
      type: object
    ReleasesV2:
      description: List of releases
      items:
        $ref: '#/components/schemas/ReleaseV2'
      type: array
    ReleaseV2:
      description: Groups artifacts with the same release name into a single resource.
      example:
        name: my-app-v1.0.1
        artifacts:
          - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            description: Johns Monday test build
            device_types_compatible:
              - Beagle Bone
            info:
              format: mender
              version: 3
            updates:
              - type_info:
                  type: rootfs-image
                files:
                  - name: rootfs-image-1
                    checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                    size: 123
                    date: 2016-03-11T13:03:17.063+0000
                metadata: {}
                meta_data: []
            artifact_provides:
              artifact_name: test
              rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
              rootfs-image.version: test
            artifact_depends:
              device_type:
                - test
            clears_artifact_provides:
              - rootfs-image.*
            size: 36891648
            modified: '2016-03-11T13:03:17.063493443Z'
          - id: 0c13a0e6-6b63-475d-8260-ee42a590e8ff
            name: Application 1.0.0
            description: Johns Monday test build
            device_types_compatible:
              - Raspberry Pi
            info:
              format: mender
              version: 3
            updates:
              - type_info:
                  type: rootfs-image
                files:
                  - name: rootfs-image-1
                    checksum: cc436f982bc60a8255fe1926a450db5f195a19ad
                    size: 123
                    date: 2016-03-11T13:03:17.063+0000
                metadata: {}
                meta_data: []
            artifact_provides:
              artifact_name: test
              rootfs-image.checksum: 32714818ad6f98ee0185a52e23a475d89122e3efd2b2c26c733781c28e798c99
              rootfs-image.version: test
            artifact_depends:
              device_type:
                - test
            clears_artifact_provides:
              - rootfs-image.*
            size: 36891648
            modified: '2016-03-11T13:03:17.063493443Z'
      properties:
        name:
          description: |
            release name.
          type: string
        modified:
          description: |
            Last modification time for the release.
          format: date-time
          type: string
        artifacts:
          description: List of artifacts for this release.
          items:
            $ref: '#/components/schemas/ArtifactV2'
          type: array
        tags:
          description: |-
            Tags assigned to the release used for filtering releases. Each tag
            must be valid a ASCII string and contain only lowercase and uppercase
            letters, digits, underscores, periods and hyphens.
          items:
            type: string
          type: array
        notes:
          description: |
            Additional information describing a Release limited to 1024 characters. Please use the v2 API to set this field.
          type: string
      type: object
    ReleaseUpdate:
      description: Fields to be updated in the given Release.
      example:
        notes: New security fixes 2023
      properties:
        notes:
          description: Release notes, limited to maximum length.
          type: string
      type: object
    Tags:
      description: |-
        Tags assigned to the release used for filtering releases. Each tag
        must be valid a ASCII string and contain only lowercase and uppercase
        letters, digits, underscores, periods and hyphens.
      items:
        type: string
      type: array
    UpdateTypes:
      description: Update types as present in the images.
      items:
        type: string
      type: array
    FilterV2:
      description: Inventory filter assigned to the deployment
      example:
        id: myfilter
        name: My Filter
        terms:
          - scope: inventory
            attribute: serial_no
            type: $eq
            value: '123456789'
      properties:
        id:
          description: |
            Unique identifier of the saved filter.
          type: string
        name:
          description: |
            Name of the saved filter.
          type: string
        terms:
          items:
            $ref: '#/components/schemas/AttributeFilterPredicate'
          type: array
      required:
        - id
        - name
      type: object
    DeploymentPhase:
      example:
        application/json:
          id: foo
          start_ts: '2020-07-06T15:04:49.114046203+02:00'
          batch_size: 5
          device_count: 42
      properties:
        id:
          description: Phase identifier.
          type: string
        batch_size:
          description: |
            Percentage of devices to update in the phase.
          type: integer
        start_ts:
          description: |
            Start date of a phase.
            May be undefined for the first phase of a deployment.
          format: date-time
          type: string
        device_count:
          description: |
            Number of devices which already requested an update within this phase.
          type: integer
      type: object
    DeploymentV2:
      example:
        created: '2016-02-11T13:03:17.063493443Z'
        status: finished
        name: production
        artifact_name: Application 0.0.1
        id: 00a0c91e6-7dec-11d0-a765-f81d4faebf6
        finished: '2016-03-11T13:03:17.063493443Z'
        phases:
          - batch_size: 5
          - start_ts: '2020-07-06T17:04:49.114046203+02:00'
            device_count: 25
          - batch_size: 15
          - start_ts: '2020-07-06T18:04:49.114046203+02:00'
            device_count: 10
          - start_ts: '2020-07-06T19:04:49.114046203+02:00'
            device_count: 0
        device_count: 500
        retries: 3
      properties:
        id:
          description: Deployment identifier
          type: string
        name:
          description: Name of the deployment
          type: string
        artifact_name:
          description: Name of the artifact to deploy
          type: string
        created:
          description: Deployment's creation date and time
          format: date-time
          type: string
        finished:
          description: Deployment's completion date and time
          format: date-time
          type: string
        status:
          description: Status of the deployment
          enum:
            - scheduled
            - pending
            - inprogress
            - finished
          type: string
        device_count:
          description: Number of devices the deployment acted upon
          type: integer
        artifacts:
          description: An array of artifact's identifiers.
          items:
            type: string
          type: array
        groups:
          description: |
            An array of groups the devices targeted by the deployment belong to.
            Available only if the user created the deployment for a group or a single device (if the device was in a static group).
          items:
            type: string
          type: array
        phases:
          description: An array of deployments phases (if any were defined for the deployment).
          items:
            $ref: '#/components/schemas/DeploymentPhase'
          type: array
        retries:
          description: The number of times a device can retry the deployment in case of failure, defaults to 0
          type: integer
        update_control_map:
          additionalProperties: true
          description: |
            A valid JSON object defining the update control map.
            *NOTE*: Available only in the Enterprise plan.
          type: object
        max_devices:
          description: |
            max_devices denotes a limit on a number of completed deployments (failed or successful) above which the dynamic deployment will be finished.
          type: integer
        initial_device_count:
          description: |
            In case of dynamic deployments this is a number of devices targeted initially (maching the filter at the moment of deployment creation).
          type: integer
        dynamic:
          description: |
            Flag indicating if the deployment is dynamic or not.
          type: boolean
        filter:
          $ref: '#/components/schemas/FilterV2'
        type:
          enum:
            - configuration
            - software
          type: string
        configuration:
          description: |
            A string containing a configuration object provided
            with the deployment constructor.
          type: string
        autogenerate_delta:
          description: |
            The flag idicating if the autogeneration of delta artifacts is enabled for a given deployment.
          type: boolean
        statistics:
          $ref: '#/components/schemas/DeploymentStatistics'
      required:
        - artifact_name
        - created
        - device_count
        - id
        - name
        - status
      type: object
    ReleasesDeleteError:
      description: Releases used by active deployment.
      example:
        error: active deployments are using some of the releases from the request
        request_id: f7881e82-0492-49fb-b459-795654e7188a
      properties:
        error:
          description: Description of the error.
          type: string
        active_deployments:
          description: List of IDs of active deployments which are using releases from the request.
          items:
            type: string
          type: array
        request_id:
          description: Request ID (same as in X-MEN-RequestID header).
          type: string
      type: object
    AuthRequest:
      type: object
      required:
        - id_data
        - pubkey
      properties:
        id_data:
          type: string
          description: Vendor-specific JSON representation of the device identity data (MACs, serial numbers, etc.).
        pubkey:
          type: string
          description: |
            The device's public key (PEM encoding), generated by the device or pre-provisioned by the vendor. Currently supported public algorithms are: RSA, Ed25519 and ECDSA P-256.
        tenant_token:
          type: string
          description: Tenant token.
      example:
        id_data: '{"mac":"00:01:02:03:04:05"}'
        pubkey: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzogVU7RGDilbsoUt/DdH
          VJvcepl0A5+xzGQ50cq1VE/Dyyy8Zp0jzRXCnnu9nu395mAFSZGotZVr+sWEpO3c
          yC3VmXdBZmXmQdZqbdD/GuixJOYfqta2ytbIUPRXFN7/I7sgzxnXWBYXYmObYvdP
          okP0mQanY+WKxp7Q16pt1RoqoAd0kmV39g13rFl35muSHbSBoAW3GBF3gO+mF5Ty
          1ddp/XcgLOsmvNNjY+2HOD5F/RX0fs07mWnbD7x+xz7KEKjF+H7ZpkqCwmwCXaf0
          iyYyh1852rti3Afw4mDxuVSD7sd9ggvYMc0QHIpQNkD4YWOhNiE1AB0zH57VbUYG
          UwIDAQAB
          -----END PUBLIC KEY-----
    ExternalDevice:
      type: object
      description: External device descriptor
      properties:
        id:
          type: string
          description: ID assigned by external provider
        name:
          type: string
          description: Name of the device
        provider:
          type: string
          description: Name of the external provider
        id_data:
          type: string
          description: Optional custom ID data
      required:
        - id
        - name
        - provider
    Limit:
      description: Limit definition
      type: object
      properties:
        limit:
          type: integer
      required:
        - limit
      example:
        limit: 123
    Status:
      description: Admission status of the device.
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
            - preauthorized
      required:
        - status
      example:
        status: accepted
    IdentityData:
      description: Device identity attributes, in the form of a JSON structure. The attributes are completely vendor-specific, the provided ones are just an example. In reference implementation structure contains vendor-selected fields, such as MACs, serial numbers, etc.
      type: object
      properties:
        mac:
          description: MAC address.
          type: string
        sku:
          description: Stock keeping unit.
          type: string
        sn:
          description: Serial number.
          type: string
      example:
        mac: '00:01:02:03:04:05'
        sku: My Device 1
        sn: SN1234567890
    Device:
      type: object
      properties:
        id:
          type: string
          description: Mender assigned Device ID.
        identity_data:
          $ref: '#/components/schemas/IdentityData'
        status:
          type: string
          enum:
            - pending
            - accepted
            - rejected
            - preauthorized
            - noauth
        created_ts:
          type: string
          format: date-time
          description: Created timestamp
        updated_ts:
          type: string
          format: date-time
          description: Updated timestamp
        check_in_time:
          type: string
          format: date-time
          description: Time when accepted device contacted server for the last time.
        auth_sets:
          type: array
          items:
            $ref: '#/components/schemas/AuthSet'
        decommissioning:
          type: boolean
          description: Devices that are part of ongoing decomissioning process will return True
    Count:
      description: Counter type
      type: object
      properties:
        count:
          description: The count of requested items.
          type: integer
      example:
        count: 42
    PreAuthSet:
      type: object
      properties:
        force:
          type: boolean
          description: Indicates that despite the device having any authsets the preauthorization should proceed.
        identity_data:
          $ref: '#/components/schemas/IdentityData'
        pubkey:
          type: string
          description: 'The device''s public key (PEM encoding), generated by the device or pre-provisioned by the vendor. Currently supported public algorithms are: RSA, Ed25519 and ECDSA P-256.'
      required:
        - identity_data
        - pubkey
      example:
        identity_data:
          mac: '00:01:02:03:04:05'
          sku: My Device 1
          sn: SN1234567890
        pubkey: |
          -----BEGIN PUBLIC KEY----- MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzogVU7RGDilbsoUt/DdH VJvcepl0A5+xzGQ50cq1VE/Dyyy8Zp0jzRXCnnu9nu395mAFSZGotZVr+sWEpO3c yC3VmXdBZmXmQdZqbdD/GuixJOYfqta2ytbIUPRXFN7/I7sgzxnXWBYXYmObYvdP okP0mQanY+WKxp7Q16pt1RoqoAd0kmV39g13rFl35muSHbSBoAW3GBF3gO+mF5Ty 1ddp/XcgLOsmvNNjY+2HOD5F/RX0fs07mWnbD7x+xz7KEKjF+H7ZpkqCwmwCXaf0 iyYyh1852rti3Afw4mDxuVSD7sd9ggvYMc0QHIpQNkD4YWOhNiE1AB0zH57VbUYG UwIDAQAB -----END PUBLIC KEY-----
    DeviceAPIConfiguration:
      type: object
      additionalProperties:
        type: string
    NewConfigurationDeployment:
      type: object
      properties:
        retries:
          type: integer
          description: The number of times a device can retry the deployment in case of failure, defaults to 0
          default: 0
        update_control_map:
          x-mender-plan:
            - enterprise
          type: object
          additionalProperties: true
          description: |
            A valid JSON object defining the update control map.
            *NOTE*: Available only in the Enterprise plan.
    NewConfigurationDeploymentResponse:
      type: object
      properties:
        deployment_id:
          type: string
          description: Deployment ID
    ManagementAPIConfiguration:
      type: object
      additionalProperties:
        type: string
    DeviceConfiguration:
      type: object
      properties:
        id:
          type: string
          format: uuid
        configured:
          $ref: '#/components/schemas/ManagementAPIConfiguration'
        reported:
          $ref: '#/components/schemas/ManagementAPIConfiguration'
        deployment_id:
          description: ID of the latest configuration deployment
          type: string
          format: uuid
        reported_ts:
          type: string
          format: date-time
        updated_ts:
          type: string
          format: date-time
    ConnectionState:
      type: object
      properties:
        device_id:
          type: string
          format: uuid
          description: Device ID.
        status:
          type: string
          enum:
            - connected
            - disconnected
            - unknown
          description: Device status.
        updated_ts:
          description: Server-side timestamp of the last device information update.
          format: date-time
          type: string
        created_ts:
          description: Server-side timestamp of the device creation.
          format: date-time
          type: string
    FileUpload:
      type: object
      properties:
        path:
          type: string
          description: The destination path on the device
        uid:
          type: integer
          description: The numerical UID of the file on the device
        gid:
          type: integer
          description: The numerical GID of the file on the device
        mode:
          type: string
          description: The octal representation of the mode of the file on the device
        file:
          type: string
          format: binary
      required:
        - path
    Attribute:
      description: Attribute descriptor.
      example:
        name: ip_addr_eth
        description: Device IP address on ethernet interface
        value: 127.0.0.1
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: |
            A human readable, unique attribute ID, e.g. 'device_type', 'ip_addr', 'cpu_load', etc.
        description:
          type: string
          description: Attribute description.
        value:
          type: string
          description: |
            The current value of the attribute.

            Attribute type is implicit, inferred from the JSON type.

            Supported types: number, string, array of numbers, array of strings.
            Mixed type arrays are not allowed.
    TenantNew:
      type: object
      properties:
        tenant_id:
          type: string
          description: ID of given tenant.
      description: Tenant configuration.
      example:
        tenant_id: '1234'
    DeviceNew:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: Mender-assigned unique ID.
        updated_ts:
          type: string
          description: Timestamp of the most recent attribute update.
        attributes:
          type: array
          description: A list of attribute descriptors.
          items:
            $ref: '#/components/schemas/Attribute'
      example:
        id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
        attributes:
          - name: ip_addr
            value: 1.2.3.4
            description: IP address
          - name: mac_addr
            value: 00.01:02:03:04:05
            description: MAC address
    DeviceUpdate:
      required:
        - id
        - revision
      type: object
      properties:
        id:
          type: string
          description: Device identifier.
        revision:
          type: number
          description: Device object revision.
          format: integer
      description: Object containing device id and device revision of the device to update.
    Groups:
      required:
        - groups
      type: object
      properties:
        groups:
          type: array
          description: List of device's groups.
          items:
            type: string
      example:
        groups:
          - test
          - production
    DeviceInventory:
      type: object
      properties:
        id:
          type: string
          description: Mender-assigned unique ID.
        updated_ts:
          type: string
          description: Timestamp of the most recent attribute update.
        attributes:
          type: array
          description: A list of attribute descriptors.
          items:
            $ref: '#/components/schemas/AttributeV2'
      example:
        id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
        attributes:
          - name: ip_addr
            scope: inventory
            value: 1.2.3.4
            description: IP address
          - name: mac_addr
            scope: inventory
            value: 00.01:02:03:04:05
            description: MAC address
        updated_ts: '2016-10-03T16:58:51.639Z'
    SelectAttribute:
      required:
        - attribute
        - scope
      type: object
      properties:
        attribute:
          type: string
          description: Attribute name.
        scope:
          $ref: '#/components/schemas/Scope'
      description: Inventory attribute
      example:
        attribute: serial_no
        scope: inventory
    FilterPredicate:
      required:
        - attribute
        - scope
        - type
        - value
      type: object
      properties:
        scope:
          $ref: '#/components/schemas/Scope'
        attribute:
          type: string
          description: |
            Name of the attribute to be queried for filtering.
        type:
          type: string
          description: Type or operator of the filter predicate.
          enum:
            - $eq
            - $in
            - $nin
        value:
          type: string
          description: |
            The value of the attribute to be used in filtering.

            Attribute type is implicit, inferred from the JSON type.

            Supported types: number, string, array of numbers, array of strings.
            Mixed arrays are not allowed.

            The $exists operator expects a boolean value: true means the specified
            attribute exists, false means the specified attribute doesn't exist.

            The $regex operator expects a string as a Perl compatible regular expression
            (PCRE), automatically anchored by ^. If the regular expression is not valid,
            the filter will produce no results. If you need to specify options and flags,
            you can provide the full regex in the format of /regex/flags, for example
            `/[a-z]+/i`.
      description: Attribute filter predicate
      example:
        type: $eq
        attribute: serial_no
        scope: inventory
        value: '123456789'
    SortCriteria:
      description: Sort criteria definition
      example:
        attribute: serial_no
        scope: inventory
        order: asc
      required:
        - attribute
        - order
        - scope
      type: object
      properties:
        attribute:
          type: string
          description: Attribute name.
        scope:
          $ref: '#/components/schemas/Scope'
        order:
          type: string
          description: Sort order.
          enum:
            - asc
            - desc
    AttributeV2:
      description: Attribute descriptor with scope (v2 APIs).
      example:
        name: serial_no
        scope: inventory
        description: Serial number
        value: '123456789'
      required:
        - name
        - scope
        - value
      type: object
      properties:
        name:
          type: string
          description: |
            A human readable, unique attribute ID, e.g. 'device_type', 'ip_addr', 'cpu_load', etc.
        scope:
          $ref: '#/components/schemas/Scope'
        description:
          type: string
          description: Attribute description.
        value:
          type: string
          description: |
            The current value of the attribute.

            Attribute type is implicit, inferred from the JSON type.

            Supported types: number, string, array of numbers, array of strings.
            Mixed arrays are not allowed.
    AttributeV1:
      required:
        - name
        - scope
        - value
      type: object
      properties:
        name:
          type: string
          description: |
            A human readable, unique attribute ID, e.g. 'device_type', 'ip_addr', 'cpu_load', etc.
        scope:
          type: string
          description: |
            The scope of the attribute.

            Scope is a string and acts as namespace for the attribute name.
        description:
          type: string
          description: Attribute description.
        value:
          type: string
          description: |
            The current value of the attribute.

            Attribute type is implicit, inferred from the JSON type.

            Supported types: number, string, array of numbers, array of strings.
            Mixed type arrays are not allowed.
        timestamp:
          type: string
          description: |
            The date and time of last tag update in RFC3339 format.
          format: date-time
      description: Attribute descriptor.
      example:
        name: ip_addr_eth
        description: Device IP address on ethernet interface
        value: 127.0.0.1
        timestamp: '2016-10-19T17:23:01.639Z'
        scope: inventory
    Tag:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
          description: |
            Tag is an attribute with 'tags' scope.

            A human readable, unique tag ID, e.g. 'location', 'environment', etc.
        description:
          type: string
          description: Tag description.
        value:
          type: string
          description: The current value of the tag.
        timestamp:
          type: string
          description: |
            The date and time of last tag update in RFC3339 format.
          format: date-time
      description: Tag descriptor.
      example:
        name: environment
        description: Test environment
        value: test
        timestamp: '2016-10-19T17:23:01.639Z'
    DeviceInventoryV1:
      type: object
      properties:
        id:
          type: string
          description: Mender-assigned unique device ID.
        updated_ts:
          type: string
          description: Timestamp of the most recent attribute update.
        attributes:
          type: array
          description: A list of attribute descriptors.
          items:
            $ref: '#/components/schemas/AttributeV1'
      example:
        id: 291ae0e5956c69c2267489213df4459d19ed48a806603def19d417d004a4b67e
        attributes:
          - name: ip_addr
            value: 1.2.3.4
            description: IP address
            scope: inventory
          - name: mac_addr
            value: 00.01:02:03:04:05
            description: MAC address
            scope: inventory
        updated_ts: '2016-10-03T16:58:51.639Z'
    Group:
      required:
        - group
      type: object
      properties:
        group:
          type: string
          description: Device group.
      example:
        group: staging
    FilterAttribute:
      required:
        - count
        - name
        - scope
      type: object
      properties:
        name:
          type: string
          description: Name of the attribute.
        scope:
          $ref: '#/components/schemas/Scope'
        count:
          type: integer
          description: Number of occurrences of the attribute in the database.
      description: Filterable attribute
      example:
        name: serial_no
        scope: inventory
        count: 10
    NewDevice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID of the new device.
        status:
          type: string
          enum:
            - accepted
            - noauth
            - pending
            - preauthorized
            - rejected
          description: Authorization status for the device.
        auth_sets:
          type: array
          items:
            $ref: '#/components/schemas/AuthSet'
        created_ts:
          type: string
          format: date-time
          description: The creation timestamp of the device.
      required:
        - id
    Integration:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: A unique integration identifier generated by the mender server
        provider:
          type: string
          enum:
            - iot-hub
            - iot-core
            - webhook
        credentials:
          $ref: '#/components/schemas/Credentials'
        description:
          type: string
          description: A short human readable description (max 1024 characters).
      required:
        - provider
        - credentials
    Credentials:
      allOf:
        - type: object
          properties:
            type:
              description: The credential type
              type: string
              enum:
                - aws
                - sas
                - http
          required:
            - type
        - oneOf:
            - $ref: '#/components/schemas/AWSCredentials'
            - $ref: '#/components/schemas/AzureSharedAccessSecret'
            - $ref: '#/components/schemas/HTTP'
      discriminator:
        propertyName: type
        mapping:
          aws: '#/components/schemas/AWSCredentials'
          sas: '#/components/schemas/AzureSharedAccessSecret'
          http: '#/components/schemas/HTTP'
    AWSCredentials:
      type: object
      description: AWS credentials in the form of access key id and secret access key, a region and a device policy name.
      properties:
        aws:
          type: object
          properties:
            access_key_id:
              type: string
            secret_access_key:
              type: string
            region:
              type: string
            device_policy_name:
              type: string
          required:
            - access_key_id
            - secret_access_key
            - region
            - device_policy_name
      required:
        - aws
    AzureSharedAccessSecret:
      type: object
      description: Shared Access Secret is an authentication mechanism in the form of a connection string for Azure IoT Hub.
      properties:
        connection_string:
          type: string
      required:
        - connection_string
    DeviceState:
      type: object
      properties:
        desired:
          description: The desired state for the device, as reported by the cloud/user.
          additionalProperties: true
        reported:
          description: State reported by the device, this cannot be changed from the cloud.
          additionalProperties: true
    HTTP:
      type: object
      description: HTTP Webhook configuration.
      properties:
        http:
          type: object
          properties:
            url:
              type: string
              description: The destination URL for the webhook. The webhook will send POST requests with event details to this target URL.
            secret:
              type: string
              description: An optional secret used to verify the integrity of the payload. The string must be in hexadecimal format.
              pattern: '[0-9a-f]{1,64}'
          required:
            - url
      required:
        - http
    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: A unique event identifier generated by the Mender server
        type:
          type: string
          enum:
            - device-provisioned
            - device-decommissioned
            - device-status-changed
          description: Type of the event
        delivery_statuses:
          type: array
          items:
            type: object
            properties:
              integration_id:
                type: string
                description: The ID of the integration the status belongs.
              success:
                type: boolean
                description: Whether the event hook was executed successfully.
              status_code:
                type: integer
                description: The (HTTP) status code of the hook.
              error:
                type: string
                description: An error message if the hook failed.
            required:
              - integration_id
              - success
        time:
          type: string
          format: date-time
          description: Creation timestamp
        data:
          oneOf:
            - $ref: '#/components/schemas/DeviceAuthEvent'
          discriminator:
            propertyName: type
            mapping:
              device-provisioned: '#/components/schemas/DeviceAuthEvent'
              device-decommissioned: '#/components/schemas/DeviceAuthEvent'
              device-status-changed: '#/components/schemas/DeviceAuthEvent'
    DeviceAuthEvent:
      type: object
      description: 'DeviceAuthEvent describes an event that relates to changes to a device''s authentication data. The properties included depends on the event type: device provisioning includes the entire device with the accepted authentication set, status change events only includes the device id and the new status, and device decommissioning will only include the device id.'
      properties:
        id:
          type: string
          description: Device unique ID.
        status:
          type: string
          description: The authentication status of the device.
        auth_sets:
          type: array
          items:
            $ref: '#/components/schemas/AuthSet'
        created_ts:
          type: string
          format: date-time
          description: The time the device was initialized in Mender.
      required:
        - id
    UserNewInternal:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          description: A unique email address. Non-ascii characters are invalid.
        password:
          type: string
          description: Password.
        propagate:
          type: boolean
          description: |
            This paramter is deprecated _since Thu Jul 6 2023_, the propagation
            of user information to tenantadm is disabled permanently.
      description: New user descriptor.
      example:
        email: user@acme.com
        password: mypass1234
    User:
      required:
        - email
        - id
      type: object
      properties:
        email:
          type: string
          description: A unique email address.
        id:
          type: string
          description: User Id.
        created_ts:
          type: string
          description: |
            Server-side timestamp of the user creation.
          format: date-time
        updated_ts:
          type: string
          description: |
            Server-side timestamp of the last user information update.
          format: date-time
        login_ts:
          type: string
          description: Timestamp of last successful login.
          format: date-time
      description: User descriptor.
      example:
        email: user@acme.com
        id: 806603def19d417d004a4b67e
        created_ts: '2020-07-06T15:04:49.114046203+02:00'
        updated_ts: '2020-07-07T01:04:49.114046203+02:00'
    LoginOptions:
      type: object
      properties:
        no_expiry:
          type: boolean
          description: Generate a JWT token with no expiration date.
      description: Log in options
      example:
        no_expiry: true
    UserNew:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          description: A unique email address. Non-ascii characters are invalid.
        password:
          type: string
          description: Password.
      description: New user descriptor.
      example:
        email: user@acme.com
        password: mypass1234
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          description: A unique email address.
        password:
          type: string
          description: New password.
        current_password:
          type: string
          description: Current password.
      description: Update user information.
      example:
        email: new_email@acme.com
        password: new password
        current_password: old password
    PersonalAccessTokenRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: Name of a token.
        expires_in:
          type: number
          description: |
            Expiration time in seconds (maximum one year - 31536000s).
            If you omit it or set it to zero, the Personal Access Token will never expire.
      description: Personal Access Token Request.
      example:
        name: my_personal_token
        expires_in: 28800
    PersonalAccessToken:
      required:
        - created_ts
        - expiration_date
        - id
        - name
      type: object
      properties:
        id:
          type: string
          description: Token identifier.
        name:
          type: string
          description: Name of a token.
        last_used:
          type: string
          description: |
            Date of last usage of a token. The accuracy is 5 minutes.
          format: date-time
        expiration_date:
          type: string
          description: Expiration date.
          format: date-time
        created_ts:
          type: string
          description: |
            Server-side timestamp of the token creation.
          format: date-time
      description: Personal Access Token Object.
      example:
        id: 806603def19d417d004a4b67e
        name: my_personal_token
        last_used: '2022-07-05T11:11:35.725Z'
        expiration_date: '2023-10-16T07:28:34.725Z'
        created_ts: '2022-07-05T11:03:27.725Z'
    Settings:
      type: object
      description: User settings.
    Plan:
      required:
        - display_name
        - features
        - name
      type: object
      properties:
        name:
          type: string
          description: |
            Unique name of the plan.
        display_name:
          type: string
          description: |
            Short information about the plan.
        features:
          $ref: '#/components/schemas/Features'
      description: Plan descriptor.
      example:
        name: mender-enterprise
        display_name: Mender Enterprise
        features:
          rbac: true
          audit_logs: false
          dynamic_groups: false
          terminal: true
          file_transfer: true
          configuration: true
          monitoring: true
    Features:
      type: object
      properties:
        rbac:
          type: boolean
        audit_logs:
          type: boolean
        dynamic_groups:
          type: boolean
        terminal:
          type: boolean
        file_transfer:
          type: boolean
        configuration:
          type: boolean
        monitoring:
          type: boolean
        reporting:
          type: boolean
      description: Features descriptor.
      example:
        rbac: true
        audit_logs: false
        dynamic_groups: false
        terminal: true
        file_transfer: true
        configuration: true
        monitoring: true
        reporting: true
    PlanLimits:
      type: object
      properties:
        devices:
          type: integer
        users:
          type: integer
        audit_logs_days:
          type: integer
      description: Plan limits descriptor.
      example:
        devices: 10
        users: 2
        audit_logs_days: 2
    PlanBindingDetails:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/Plan'
        limits:
          $ref: '#/components/schemas/PlanLimits'
      description: Combination of plan and limits objects.
      example:
        plan:
          product: Mender
          name: mender-enterprise
          display_name: Mender Enterprise
          features:
            rbac: true
            audit_logs: true
        limits:
          devices: 10
          users: 2
          audit_logs_days: 2
    CLIParams:
      type: object
      properties:
        command:
          type: array
          items:
            type: string
        executionTimeOut:
          type: integer
      description: CLI parameters
    HTTPParams:
      type: object
      properties:
        uri:
          type: string
        method:
          type: string
        contentType:
          type: string
        body:
          type: string
        json:
          type: object
          properties: {}
        headers:
          type: object
          properties: {}
        statusCodes:
          type: array
          items:
            type: integer
        connectionTimeOut:
          type: integer
        readTimeOut:
          type: integer
      description: HTTP parameters
    Task:
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        retries:
          type: integer
        retryDelaySeconds:
          type: integer
        requires:
          type: array
          items:
            type: string
        cli:
          $ref: '#/components/schemas/CLIParams'
        http:
          $ref: '#/components/schemas/HTTPParams'
      description: Task definition
    Workflow:
      required:
        - name
        - tasks
        - version
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: integer
        schemaversion:
          type: integer
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        inputParameters:
          type: array
          items:
            type: string
    InputParameter:
      required:
        - name
        - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      example:
        name: key
        value: parameter
    TaskResultCLI:
      type: object
      properties:
        command:
          type: array
          items:
            type: string
        output:
          type: string
        error:
          type: string
        exitCode:
          type: integer
    TaskResultHTTPRequest:
      type: object
      properties:
        statusCode:
          type: integer
        body:
          type: string
    TaskResultHTTPResponse:
      type: object
      properties:
        uri:
          type: string
        method:
          type: string
        headers:
          type: array
          items:
            type: string
        body:
          type: string
    TaskResult:
      type: object
      properties:
        success:
          type: boolean
        cli:
          $ref: '#/components/schemas/TaskResultCLI'
        request:
          $ref: '#/components/schemas/TaskResultHTTPRequest'
        response:
          $ref: '#/components/schemas/TaskResultHTTPResponse'
    JobStatus:
      type: object
      properties:
        id:
          type: string
        workflowName:
          type: string
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/InputParameter'
        status:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskResult'
    JobObject:
      type: object
      properties:
        id:
          type: string
        workflowName:
          type: string
        inputParameters:
          type: array
          items:
            $ref: '#/components/schemas/InputParameter'
        status:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/TaskResult'
        insert_time:
          type: string
          format: date-time
        version:
          type: string
  securitySchemes:
    ManagementJWT:
      type: http
      description: |
        API token issued by User Authentication service.
      scheme: bearer
      bearerFormat: JWT
    DeviceJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        API token issued by Device Authentication service.
        Format: 'Authorization: Bearer [JWT]'
    Login:
      type: http
      scheme: basic
  parameters:
    RequestId:
      name: X-MEN-RequestID
      in: header
      required: false
      description: A request identification
      schema:
        type: string
x-tagGroups:
  - name: Mender API
    tags:
      - Mender_API_Mender API
  - name: Deployments
    tags:
      - Deployments_Device API
      - Deployments_Management API
  - name: Deployments Internal API
    tags:
      - Deployments_Internal_API_Internal API
  - name: Deployments v2
    tags:
      - Deployments_v2_Management API
  - name: Device Authentication
    tags:
      - Device_Authentication_Device API
      - Device_Authentication_Internal API
      - Device_Authentication_Management API
  - name: Device configure
    tags:
      - Device_configure_Device API
      - Device_configure_Internal API
      - Device_configure_Management API
  - name: Device connect
    tags:
      - Device_connect_Device API
      - Device_connect_Internal API
      - Device_connect_Management API
  - name: Device inventory
    tags:
      - Device_inventory_Device API
      - Device_inventory_Internal API
      - Device_inventory_Management API
  - name: Device inventory filters and search
    tags:
      - Device_inventory_filters_and_search_Internal API
      - Device_inventory_filters_and_search_Management API
  - name: IoT Manager
    tags:
      - IoT_Manager_Internal API
      - IoT_Manager_Management API
  - name: User administration and authentication
    tags:
      - User_administration_and_authentication_Internal API
  - name: User Administration
    tags:
      - User_Administration_Management API
  - name: Workflows
    tags:
      - Workflows_other
