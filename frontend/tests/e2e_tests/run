#!/bin/bash
set -e

export SERVER_ROOT=${SERVER_ROOT:-$(git rev-parse --show-toplevel)}
export GUI_REPOSITORY=${GUI_REPOSITORY:-${SERVER_ROOT}/frontend}
export COMPOSE_FILE="${SERVER_ROOT}/docker-compose.yml:${GUI_REPOSITORY}/tests/e2e_tests/docker-compose.e2e-tests.yml"
LOCAL=""
VISUAL=""

usage() {
    echo "runner script for gui-specific integration tests"
    echo ""
    echo "$0"
    echo -e "\t-h --help"
    echo -e "\t-c --skip-cleanup \tleave containers running after tests"
    echo -e "\t--local           \texecute tests on your local machine"
    echo -e "\t--local-visual    \texecute tests in visual mode (implies --local)"
    echo -e "\t-f=<FILE>         \tspecify custom compose file(s); default files will not be used,"
    echo -e "\t--enterprise      \tuse enterprise"
    echo -e "\t                  \tmake sure to specify all files you need"
    echo ""
    echo -e "examples:"
    echo -e "run all GUI tests, from root of this repo, with default ST setup:"
    echo -e "GUI_REPOSITORY='<path-to-local-gui-repo>' SERVER_ROOT=. $0"
}

parse_args(){
    whitespace="[[:space:]]"

    # FIXME args must be passed in the form -f=<path>; spaces don't workalthough they're standard...
    while [ $# -gt 0 ]; do
        case $1 in
            -h | --help)
            usage
            exit
            ;;
            -c | --skip-cleanup)
            SKIP_CLEANUP=1
            shift
            ;;
            --enterprise)
            export TEST_ENVIRONMENT=enterprise
            export COMPOSE_FILE="${COMPOSE_FILE}:${SERVER_ROOT}/compose/docker-compose.enterprise.yml"
            export COMPOSE_FILE="${COMPOSE_FILE}:${GUI_REPOSITORY}/tests/e2e_tests/docker-compose.e2e-tests.enterprise.yml"
            ENTERPRISE=1
            shift
            ;;
            --local)
              LOCAL="yay"
              shift
            ;;
            --local-visual)
              LOCAL="yay"
              VISUAL="yay"
              shift
            ;;
            -f)
            COMPOSE_FILE="${COMPOSE_FILE}:${2}"
            shift 2
            ;;
            *)
        esac
    done
}

USER=mender-demo@example.com
USER2=demo-secondary@example.com
SP_TENANT=tenant-demo@example.com
PASSWORD=mysecretpassword!123

run_tests() {
    docker compose down -v --remove-orphans && docker compose up --quiet-pull -d
    declare retries=5

    if [[ $ENTERPRISE -eq 1 ]]; then
        # FIXME: Deployments service is too slow to start serving the API.
        #        If we immediately start creating the organization, the
        #        deployments service may not listen
        sleep 5

        # remove the client, since it won't be able to connect as it lacks a proper tenant token config
        spTenant=$(docker compose exec tenantadm /usr/bin/tenantadm \
          create-org \
          --name=secondary \
          --username=$SP_TENANT \
          --device-limit 100 \
          --password=$PASSWORD)
        docker compose exec tenantadm tenantadm update-tenant --id $spTenant --service-provider
        docker compose exec mongo mongosh --eval 'db.getSiblingDB("tenantadm").tenants.updateOne({}, {$set: {max_child_tenants: 100}})'
        docker compose rm -fsv client
        tenant=$(docker compose exec tenantadm /usr/bin/tenantadm \
          create-org \
          --name=test \
          --username=$USER \
          --password=$PASSWORD \
          --addon configure \
          --addon monitor \
          --addon troubleshoot)
        secondTenant=$(docker compose exec tenantadm /usr/bin/tenantadm \
          create-org \
          --name=secondary \
          --username=$USER2 \
          --password=$PASSWORD)
        TENANT_TOKEN=$(docker compose exec tenantadm /usr/bin/tenantadm \
          get-tenant \
          --id $tenant \
          | jq -r .tenant_token)
        export TENANT_TOKEN
        # start a new client, using the obtained tenant token - starting it later (in the test suite) would require docker access in the test runner
        docker compose run -d client
    else
      docker compose exec useradm /usr/bin/useradm \
        create-user \
        --username $USER \
        --password $PASSWORD
    fi
    declare retries=5

    if test -z "$LOCAL"; then
        # 'npm install && npx playwright install' are needed to help with updates
        # to the playwright packages as we rely on the prebuilt
        # mender-test-containers image
        docker compose run gui-tests-runner \
          /bin/sh -c '
            npm i && 
              if ! npx playwright install chromium > playwright-install.log 2>&1; then
                echo "Playwright dependencies installation failed:"
                cat playwright-install.log
                exit 1
              fi &&
            npm run test -- --project=chromium'
    else
        if test -z "$VISUAL"; then
          npm run test
        else
          npm run test-visual-new
        fi
    fi
    [ $? == 0 ] || failed=1
}

cleanup(){
    rc=$?
    logdir=${GUI_REPOSITORY}/logs
    tmppath=${logdir}/gui_e2e_tests.txt
    mkdir -p "$logdir"
    test $rc -ne 0 && \
      echo "-- tests failed, dumping logs to $tmppath" && \
      docker compose logs > $tmppath
    [ -z $SKIP_CLEANUP ] && docker compose down -v --remove-orphans || true
}

trap cleanup EXIT
parse_args "$@"
run_tests
